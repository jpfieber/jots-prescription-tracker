/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/moment/moment.js
var require_moment = __commonJS({
  "node_modules/moment/moment.js"(exports, module2) {
    (function(global, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global.moment = factory();
    })(exports, function() {
      "use strict";
      var hookCallback;
      function hooks() {
        return hookCallback.apply(null, arguments);
      }
      function setHookCallback(callback) {
        hookCallback = callback;
      }
      function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
      }
      function isObject(input) {
        return input != null && Object.prototype.toString.call(input) === "[object Object]";
      }
      function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
      }
      function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
          return Object.getOwnPropertyNames(obj).length === 0;
        } else {
          var k;
          for (k in obj) {
            if (hasOwnProp(obj, k)) {
              return false;
            }
          }
          return true;
        }
      }
      function isUndefined(input) {
        return input === void 0;
      }
      function isNumber(input) {
        return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
      }
      function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
      }
      function map(arr, fn) {
        var res = [], i, arrLen = arr.length;
        for (i = 0; i < arrLen; ++i) {
          res.push(fn(arr[i], i));
        }
        return res;
      }
      function extend(a, b) {
        for (var i in b) {
          if (hasOwnProp(b, i)) {
            a[i] = b[i];
          }
        }
        if (hasOwnProp(b, "toString")) {
          a.toString = b.toString;
        }
        if (hasOwnProp(b, "valueOf")) {
          a.valueOf = b.valueOf;
        }
        return a;
      }
      function createUTC(input, format2, locale2, strict) {
        return createLocalOrUTC(input, format2, locale2, strict, true).utc();
      }
      function defaultParsingFlags() {
        return {
          empty: false,
          unusedTokens: [],
          unusedInput: [],
          overflow: -2,
          charsLeftOver: 0,
          nullInput: false,
          invalidEra: null,
          invalidMonth: null,
          invalidFormat: false,
          userInvalidated: false,
          iso: false,
          parsedDateParts: [],
          era: null,
          meridiem: null,
          rfc2822: false,
          weekdayMismatch: false
        };
      }
      function getParsingFlags(m) {
        if (m._pf == null) {
          m._pf = defaultParsingFlags();
        }
        return m._pf;
      }
      var some;
      if (Array.prototype.some) {
        some = Array.prototype.some;
      } else {
        some = function(fun) {
          var t = Object(this), len = t.length >>> 0, i;
          for (i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
              return true;
            }
          }
          return false;
        };
      }
      function isValid(m) {
        var flags = null, parsedParts = false, isNowValid = m._d && !isNaN(m._d.getTime());
        if (isNowValid) {
          flags = getParsingFlags(m);
          parsedParts = some.call(flags.parsedDateParts, function(i) {
            return i != null;
          });
          isNowValid = flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
          if (m._strict) {
            isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
          }
        }
        if (Object.isFrozen == null || !Object.isFrozen(m)) {
          m._isValid = isNowValid;
        } else {
          return isNowValid;
        }
        return m._isValid;
      }
      function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
          extend(getParsingFlags(m), flags);
        } else {
          getParsingFlags(m).userInvalidated = true;
        }
        return m;
      }
      var momentProperties = hooks.momentProperties = [], updateInProgress = false;
      function copyConfig(to2, from2) {
        var i, prop, val, momentPropertiesLen = momentProperties.length;
        if (!isUndefined(from2._isAMomentObject)) {
          to2._isAMomentObject = from2._isAMomentObject;
        }
        if (!isUndefined(from2._i)) {
          to2._i = from2._i;
        }
        if (!isUndefined(from2._f)) {
          to2._f = from2._f;
        }
        if (!isUndefined(from2._l)) {
          to2._l = from2._l;
        }
        if (!isUndefined(from2._strict)) {
          to2._strict = from2._strict;
        }
        if (!isUndefined(from2._tzm)) {
          to2._tzm = from2._tzm;
        }
        if (!isUndefined(from2._isUTC)) {
          to2._isUTC = from2._isUTC;
        }
        if (!isUndefined(from2._offset)) {
          to2._offset = from2._offset;
        }
        if (!isUndefined(from2._pf)) {
          to2._pf = getParsingFlags(from2);
        }
        if (!isUndefined(from2._locale)) {
          to2._locale = from2._locale;
        }
        if (momentPropertiesLen > 0) {
          for (i = 0; i < momentPropertiesLen; i++) {
            prop = momentProperties[i];
            val = from2[prop];
            if (!isUndefined(val)) {
              to2[prop] = val;
            }
          }
        }
        return to2;
      }
      function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
          this._d = /* @__PURE__ */ new Date(NaN);
        }
        if (updateInProgress === false) {
          updateInProgress = true;
          hooks.updateOffset(this);
          updateInProgress = false;
        }
      }
      function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
      }
      function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
          console.warn("Deprecation warning: " + msg);
        }
      }
      function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function() {
          if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
          }
          if (firstTime) {
            var args = [], arg, i, key, argLen = arguments.length;
            for (i = 0; i < argLen; i++) {
              arg = "";
              if (typeof arguments[i] === "object") {
                arg += "\n[" + i + "] ";
                for (key in arguments[0]) {
                  if (hasOwnProp(arguments[0], key)) {
                    arg += key + ": " + arguments[0][key] + ", ";
                  }
                }
                arg = arg.slice(0, -2);
              } else {
                arg = arguments[i];
              }
              args.push(arg);
            }
            warn(
              msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack
            );
            firstTime = false;
          }
          return fn.apply(this, arguments);
        }, fn);
      }
      var deprecations = {};
      function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
          warn(msg);
          deprecations[name] = true;
        }
      }
      hooks.suppressDeprecationWarnings = false;
      hooks.deprecationHandler = null;
      function isFunction(input) {
        return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
      }
      function set(config) {
        var prop, i;
        for (i in config) {
          if (hasOwnProp(config, i)) {
            prop = config[i];
            if (isFunction(prop)) {
              this[i] = prop;
            } else {
              this["_" + i] = prop;
            }
          }
        }
        this._config = config;
        this._dayOfMonthOrdinalParseLenient = new RegExp(
          (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source
        );
      }
      function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
          if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
              res[prop] = {};
              extend(res[prop], parentConfig[prop]);
              extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
              res[prop] = childConfig[prop];
            } else {
              delete res[prop];
            }
          }
        }
        for (prop in parentConfig) {
          if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
            res[prop] = extend({}, res[prop]);
          }
        }
        return res;
      }
      function Locale(config) {
        if (config != null) {
          this.set(config);
        }
      }
      var keys;
      if (Object.keys) {
        keys = Object.keys;
      } else {
        keys = function(obj) {
          var i, res = [];
          for (i in obj) {
            if (hasOwnProp(obj, i)) {
              res.push(i);
            }
          }
          return res;
        };
      }
      var defaultCalendar = {
        sameDay: "[Today at] LT",
        nextDay: "[Tomorrow at] LT",
        nextWeek: "dddd [at] LT",
        lastDay: "[Yesterday at] LT",
        lastWeek: "[Last] dddd [at] LT",
        sameElse: "L"
      };
      function calendar(key, mom, now2) {
        var output = this._calendar[key] || this._calendar["sameElse"];
        return isFunction(output) ? output.call(mom, now2) : output;
      }
      function zeroFill(number, targetLength, forceSign) {
        var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign2 = number >= 0;
        return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
      }
      var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
      function addFormatToken(token2, padded, ordinal2, callback) {
        var func = callback;
        if (typeof callback === "string") {
          func = function() {
            return this[callback]();
          };
        }
        if (token2) {
          formatTokenFunctions[token2] = func;
        }
        if (padded) {
          formatTokenFunctions[padded[0]] = function() {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
          };
        }
        if (ordinal2) {
          formatTokenFunctions[ordinal2] = function() {
            return this.localeData().ordinal(
              func.apply(this, arguments),
              token2
            );
          };
        }
      }
      function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, "");
        }
        return input.replace(/\\/g, "");
      }
      function makeFormatFunction(format2) {
        var array = format2.match(formattingTokens), i, length;
        for (i = 0, length = array.length; i < length; i++) {
          if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
          } else {
            array[i] = removeFormattingTokens(array[i]);
          }
        }
        return function(mom) {
          var output = "", i2;
          for (i2 = 0; i2 < length; i2++) {
            output += isFunction(array[i2]) ? array[i2].call(mom, format2) : array[i2];
          }
          return output;
        };
      }
      function formatMoment(m, format2) {
        if (!m.isValid()) {
          return m.localeData().invalidDate();
        }
        format2 = expandFormat(format2, m.localeData());
        formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
        return formatFunctions[format2](m);
      }
      function expandFormat(format2, locale2) {
        var i = 5;
        function replaceLongDateFormatTokens(input) {
          return locale2.longDateFormat(input) || input;
        }
        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format2)) {
          format2 = format2.replace(
            localFormattingTokens,
            replaceLongDateFormatTokens
          );
          localFormattingTokens.lastIndex = 0;
          i -= 1;
        }
        return format2;
      }
      var defaultLongDateFormat = {
        LTS: "h:mm:ss A",
        LT: "h:mm A",
        L: "MM/DD/YYYY",
        LL: "MMMM D, YYYY",
        LLL: "MMMM D, YYYY h:mm A",
        LLLL: "dddd, MMMM D, YYYY h:mm A"
      };
      function longDateFormat(key) {
        var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format2 || !formatUpper) {
          return format2;
        }
        this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
          if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
            return tok.slice(1);
          }
          return tok;
        }).join("");
        return this._longDateFormat[key];
      }
      var defaultInvalidDate = "Invalid date";
      function invalidDate() {
        return this._invalidDate;
      }
      var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
      function ordinal(number) {
        return this._ordinal.replace("%d", number);
      }
      var defaultRelativeTime = {
        future: "in %s",
        past: "%s ago",
        s: "a few seconds",
        ss: "%d seconds",
        m: "a minute",
        mm: "%d minutes",
        h: "an hour",
        hh: "%d hours",
        d: "a day",
        dd: "%d days",
        w: "a week",
        ww: "%d weeks",
        M: "a month",
        MM: "%d months",
        y: "a year",
        yy: "%d years"
      };
      function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
      }
      function pastFuture(diff2, output) {
        var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
        return isFunction(format2) ? format2(output) : format2.replace(/%s/i, output);
      }
      var aliases = {
        D: "date",
        dates: "date",
        date: "date",
        d: "day",
        days: "day",
        day: "day",
        e: "weekday",
        weekdays: "weekday",
        weekday: "weekday",
        E: "isoWeekday",
        isoweekdays: "isoWeekday",
        isoweekday: "isoWeekday",
        DDD: "dayOfYear",
        dayofyears: "dayOfYear",
        dayofyear: "dayOfYear",
        h: "hour",
        hours: "hour",
        hour: "hour",
        ms: "millisecond",
        milliseconds: "millisecond",
        millisecond: "millisecond",
        m: "minute",
        minutes: "minute",
        minute: "minute",
        M: "month",
        months: "month",
        month: "month",
        Q: "quarter",
        quarters: "quarter",
        quarter: "quarter",
        s: "second",
        seconds: "second",
        second: "second",
        gg: "weekYear",
        weekyears: "weekYear",
        weekyear: "weekYear",
        GG: "isoWeekYear",
        isoweekyears: "isoWeekYear",
        isoweekyear: "isoWeekYear",
        w: "week",
        weeks: "week",
        week: "week",
        W: "isoWeek",
        isoweeks: "isoWeek",
        isoweek: "isoWeek",
        y: "year",
        years: "year",
        year: "year"
      };
      function normalizeUnits(units) {
        return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
      }
      function normalizeObjectUnits(inputObject) {
        var normalizedInput = {}, normalizedProp, prop;
        for (prop in inputObject) {
          if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
              normalizedInput[normalizedProp] = inputObject[prop];
            }
          }
        }
        return normalizedInput;
      }
      var priorities = {
        date: 9,
        day: 11,
        weekday: 11,
        isoWeekday: 11,
        dayOfYear: 4,
        hour: 13,
        millisecond: 16,
        minute: 14,
        month: 8,
        quarter: 7,
        second: 15,
        weekYear: 1,
        isoWeekYear: 1,
        week: 5,
        isoWeek: 5,
        year: 1
      };
      function getPrioritizedUnits(unitsObj) {
        var units = [], u;
        for (u in unitsObj) {
          if (hasOwnProp(unitsObj, u)) {
            units.push({ unit: u, priority: priorities[u] });
          }
        }
        units.sort(function(a, b) {
          return a.priority - b.priority;
        });
        return units;
      }
      var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, match1to2NoLeadingZero = /^[1-9]\d?/, match1to2HasZero = /^([1-9]\d|\d)/, regexes;
      regexes = {};
      function addRegexToken(token2, regex, strictRegex) {
        regexes[token2] = isFunction(regex) ? regex : function(isStrict, localeData2) {
          return isStrict && strictRegex ? strictRegex : regex;
        };
      }
      function getParseRegexForToken(token2, config) {
        if (!hasOwnProp(regexes, token2)) {
          return new RegExp(unescapeFormat(token2));
        }
        return regexes[token2](config._strict, config._locale);
      }
      function unescapeFormat(s) {
        return regexEscape(
          s.replace("\\", "").replace(
            /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
            function(matched, p1, p2, p3, p4) {
              return p1 || p2 || p3 || p4;
            }
          )
        );
      }
      function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
      }
      function absFloor(number) {
        if (number < 0) {
          return Math.ceil(number) || 0;
        } else {
          return Math.floor(number);
        }
      }
      function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          value = absFloor(coercedNumber);
        }
        return value;
      }
      var tokens = {};
      function addParseToken(token2, callback) {
        var i, func = callback, tokenLen;
        if (typeof token2 === "string") {
          token2 = [token2];
        }
        if (isNumber(callback)) {
          func = function(input, array) {
            array[callback] = toInt(input);
          };
        }
        tokenLen = token2.length;
        for (i = 0; i < tokenLen; i++) {
          tokens[token2[i]] = func;
        }
      }
      function addWeekParseToken(token2, callback) {
        addParseToken(token2, function(input, array, config, token3) {
          config._w = config._w || {};
          callback(input, config._w, config, token3);
        });
      }
      function addTimeToArrayFromToken(token2, input, config) {
        if (input != null && hasOwnProp(tokens, token2)) {
          tokens[token2](input, config._a, config, token2);
        }
      }
      function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
      }
      var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
      addFormatToken("Y", 0, 0, function() {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : "+" + y;
      });
      addFormatToken(0, ["YY", 2], 0, function() {
        return this.year() % 100;
      });
      addFormatToken(0, ["YYYY", 4], 0, "year");
      addFormatToken(0, ["YYYYY", 5], 0, "year");
      addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
      addRegexToken("Y", matchSigned);
      addRegexToken("YY", match1to2, match2);
      addRegexToken("YYYY", match1to4, match4);
      addRegexToken("YYYYY", match1to6, match6);
      addRegexToken("YYYYYY", match1to6, match6);
      addParseToken(["YYYYY", "YYYYYY"], YEAR);
      addParseToken("YYYY", function(input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
      });
      addParseToken("YY", function(input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
      });
      addParseToken("Y", function(input, array) {
        array[YEAR] = parseInt(input, 10);
      });
      function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
      }
      hooks.parseTwoDigitYear = function(input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
      };
      var getSetYear = makeGetSet("FullYear", true);
      function getIsLeapYear() {
        return isLeapYear(this.year());
      }
      function makeGetSet(unit, keepTime) {
        return function(value) {
          if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
          } else {
            return get(this, unit);
          }
        };
      }
      function get(mom, unit) {
        if (!mom.isValid()) {
          return NaN;
        }
        var d = mom._d, isUTC = mom._isUTC;
        switch (unit) {
          case "Milliseconds":
            return isUTC ? d.getUTCMilliseconds() : d.getMilliseconds();
          case "Seconds":
            return isUTC ? d.getUTCSeconds() : d.getSeconds();
          case "Minutes":
            return isUTC ? d.getUTCMinutes() : d.getMinutes();
          case "Hours":
            return isUTC ? d.getUTCHours() : d.getHours();
          case "Date":
            return isUTC ? d.getUTCDate() : d.getDate();
          case "Day":
            return isUTC ? d.getUTCDay() : d.getDay();
          case "Month":
            return isUTC ? d.getUTCMonth() : d.getMonth();
          case "FullYear":
            return isUTC ? d.getUTCFullYear() : d.getFullYear();
          default:
            return NaN;
        }
      }
      function set$1(mom, unit, value) {
        var d, isUTC, year, month, date;
        if (!mom.isValid() || isNaN(value)) {
          return;
        }
        d = mom._d;
        isUTC = mom._isUTC;
        switch (unit) {
          case "Milliseconds":
            return void (isUTC ? d.setUTCMilliseconds(value) : d.setMilliseconds(value));
          case "Seconds":
            return void (isUTC ? d.setUTCSeconds(value) : d.setSeconds(value));
          case "Minutes":
            return void (isUTC ? d.setUTCMinutes(value) : d.setMinutes(value));
          case "Hours":
            return void (isUTC ? d.setUTCHours(value) : d.setHours(value));
          case "Date":
            return void (isUTC ? d.setUTCDate(value) : d.setDate(value));
          // case 'Day': // Not real
          //    return void (isUTC ? d.setUTCDay(value) : d.setDay(value));
          // case 'Month': // Not used because we need to pass two variables
          //     return void (isUTC ? d.setUTCMonth(value) : d.setMonth(value));
          case "FullYear":
            break;
          // See below ...
          default:
            return;
        }
        year = value;
        month = mom.month();
        date = mom.date();
        date = date === 29 && month === 1 && !isLeapYear(year) ? 28 : date;
        void (isUTC ? d.setUTCFullYear(year, month, date) : d.setFullYear(year, month, date));
      }
      function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
          return this[units]();
        }
        return this;
      }
      function stringSet(units, value) {
        if (typeof units === "object") {
          units = normalizeObjectUnits(units);
          var prioritized = getPrioritizedUnits(units), i, prioritizedLen = prioritized.length;
          for (i = 0; i < prioritizedLen; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
          }
        } else {
          units = normalizeUnits(units);
          if (isFunction(this[units])) {
            return this[units](value);
          }
        }
        return this;
      }
      function mod(n, x) {
        return (n % x + x) % x;
      }
      var indexOf;
      if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
      } else {
        indexOf = function(o) {
          var i;
          for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
              return i;
            }
          }
          return -1;
        };
      }
      function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
          return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
      }
      addFormatToken("M", ["MM", 2], "Mo", function() {
        return this.month() + 1;
      });
      addFormatToken("MMM", 0, 0, function(format2) {
        return this.localeData().monthsShort(this, format2);
      });
      addFormatToken("MMMM", 0, 0, function(format2) {
        return this.localeData().months(this, format2);
      });
      addRegexToken("M", match1to2, match1to2NoLeadingZero);
      addRegexToken("MM", match1to2, match2);
      addRegexToken("MMM", function(isStrict, locale2) {
        return locale2.monthsShortRegex(isStrict);
      });
      addRegexToken("MMMM", function(isStrict, locale2) {
        return locale2.monthsRegex(isStrict);
      });
      addParseToken(["M", "MM"], function(input, array) {
        array[MONTH] = toInt(input) - 1;
      });
      addParseToken(["MMM", "MMMM"], function(input, array, config, token2) {
        var month = config._locale.monthsParse(input, token2, config._strict);
        if (month != null) {
          array[MONTH] = month;
        } else {
          getParsingFlags(config).invalidMonth = input;
        }
      });
      var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split(
        "_"
      ), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
      function localeMonths(m, format2) {
        if (!m) {
          return isArray(this._months) ? this._months : this._months["standalone"];
        }
        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m.month()];
      }
      function localeMonthsShort(m, format2) {
        if (!m) {
          return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m.month()];
      }
      function handleStrictParse(monthName, format2, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
          for (i = 0; i < 12; ++i) {
            mom = createUTC([2e3, i]);
            this._shortMonthsParse[i] = this.monthsShort(
              mom,
              ""
            ).toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format2 === "MMM") {
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format2 === "MMM") {
            ii = indexOf.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeMonthsParse(monthName, format2, strict) {
        var i, mom, regex;
        if (this._monthsParseExact) {
          return handleStrictParse.call(this, monthName, format2, strict);
        }
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
        }
        for (i = 0; i < 12; i++) {
          mom = createUTC([2e3, i]);
          if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp(
              "^" + this.months(mom, "").replace(".", "") + "$",
              "i"
            );
            this._shortMonthsParse[i] = new RegExp(
              "^" + this.monthsShort(mom, "").replace(".", "") + "$",
              "i"
            );
          }
          if (!strict && !this._monthsParse[i]) {
            regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
            this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
          }
          if (strict && format2 === "MMMM" && this._longMonthsParse[i].test(monthName)) {
            return i;
          } else if (strict && format2 === "MMM" && this._shortMonthsParse[i].test(monthName)) {
            return i;
          } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
          }
        }
      }
      function setMonth(mom, value) {
        if (!mom.isValid()) {
          return mom;
        }
        if (typeof value === "string") {
          if (/^\d+$/.test(value)) {
            value = toInt(value);
          } else {
            value = mom.localeData().monthsParse(value);
            if (!isNumber(value)) {
              return mom;
            }
          }
        }
        var month = value, date = mom.date();
        date = date < 29 ? date : Math.min(date, daysInMonth(mom.year(), month));
        void (mom._isUTC ? mom._d.setUTCMonth(month, date) : mom._d.setMonth(month, date));
        return mom;
      }
      function getSetMonth(value) {
        if (value != null) {
          setMonth(this, value);
          hooks.updateOffset(this, true);
          return this;
        } else {
          return get(this, "Month");
        }
      }
      function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
      }
      function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, "_monthsRegex")) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsShortStrictRegex;
          } else {
            return this._monthsShortRegex;
          }
        } else {
          if (!hasOwnProp(this, "_monthsShortRegex")) {
            this._monthsShortRegex = defaultMonthsShortRegex;
          }
          return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
      }
      function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, "_monthsRegex")) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsStrictRegex;
          } else {
            return this._monthsRegex;
          }
        } else {
          if (!hasOwnProp(this, "_monthsRegex")) {
            this._monthsRegex = defaultMonthsRegex;
          }
          return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
      }
      function computeMonthsParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var shortPieces = [], longPieces = [], mixedPieces = [], i, mom, shortP, longP;
        for (i = 0; i < 12; i++) {
          mom = createUTC([2e3, i]);
          shortP = regexEscape(this.monthsShort(mom, ""));
          longP = regexEscape(this.months(mom, ""));
          shortPieces.push(shortP);
          longPieces.push(longP);
          mixedPieces.push(longP);
          mixedPieces.push(shortP);
        }
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp(
          "^(" + longPieces.join("|") + ")",
          "i"
        );
        this._monthsShortStrictRegex = new RegExp(
          "^(" + shortPieces.join("|") + ")",
          "i"
        );
      }
      function createDate(y, m, d, h, M, s, ms) {
        var date;
        if (y < 100 && y >= 0) {
          date = new Date(y + 400, m, d, h, M, s, ms);
          if (isFinite(date.getFullYear())) {
            date.setFullYear(y);
          }
        } else {
          date = new Date(y, m, d, h, M, s, ms);
        }
        return date;
      }
      function createUTCDate(y) {
        var date, args;
        if (y < 100 && y >= 0) {
          args = Array.prototype.slice.call(arguments);
          args[0] = y + 400;
          date = new Date(Date.UTC.apply(null, args));
          if (isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
          }
        } else {
          date = new Date(Date.UTC.apply(null, arguments));
        }
        return date;
      }
      function firstWeekOffset(year, dow, doy) {
        var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
      }
      function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
        if (dayOfYear <= 0) {
          resYear = year - 1;
          resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
          resYear = year + 1;
          resDayOfYear = dayOfYear - daysInYear(year);
        } else {
          resYear = year;
          resDayOfYear = dayOfYear;
        }
        return {
          year: resYear,
          dayOfYear: resDayOfYear
        };
      }
      function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
        if (week < 1) {
          resYear = mom.year() - 1;
          resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
          resWeek = week - weeksInYear(mom.year(), dow, doy);
          resYear = mom.year() + 1;
        } else {
          resYear = mom.year();
          resWeek = week;
        }
        return {
          week: resWeek,
          year: resYear
        };
      }
      function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
      }
      addFormatToken("w", ["ww", 2], "wo", "week");
      addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
      addRegexToken("w", match1to2, match1to2NoLeadingZero);
      addRegexToken("ww", match1to2, match2);
      addRegexToken("W", match1to2, match1to2NoLeadingZero);
      addRegexToken("WW", match1to2, match2);
      addWeekParseToken(
        ["w", "ww", "W", "WW"],
        function(input, week, config, token2) {
          week[token2.substr(0, 1)] = toInt(input);
        }
      );
      function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
      }
      var defaultLocaleWeek = {
        dow: 0,
        // Sunday is the first day of the week.
        doy: 6
        // The week that contains Jan 6th is the first week of the year.
      };
      function localeFirstDayOfWeek() {
        return this._week.dow;
      }
      function localeFirstDayOfYear() {
        return this._week.doy;
      }
      function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, "d");
      }
      function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, "d");
      }
      addFormatToken("d", 0, "do", "day");
      addFormatToken("dd", 0, 0, function(format2) {
        return this.localeData().weekdaysMin(this, format2);
      });
      addFormatToken("ddd", 0, 0, function(format2) {
        return this.localeData().weekdaysShort(this, format2);
      });
      addFormatToken("dddd", 0, 0, function(format2) {
        return this.localeData().weekdays(this, format2);
      });
      addFormatToken("e", 0, 0, "weekday");
      addFormatToken("E", 0, 0, "isoWeekday");
      addRegexToken("d", match1to2);
      addRegexToken("e", match1to2);
      addRegexToken("E", match1to2);
      addRegexToken("dd", function(isStrict, locale2) {
        return locale2.weekdaysMinRegex(isStrict);
      });
      addRegexToken("ddd", function(isStrict, locale2) {
        return locale2.weekdaysShortRegex(isStrict);
      });
      addRegexToken("dddd", function(isStrict, locale2) {
        return locale2.weekdaysRegex(isStrict);
      });
      addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config, token2) {
        var weekday = config._locale.weekdaysParse(input, token2, config._strict);
        if (weekday != null) {
          week.d = weekday;
        } else {
          getParsingFlags(config).invalidWeekday = input;
        }
      });
      addWeekParseToken(["d", "e", "E"], function(input, week, config, token2) {
        week[token2] = toInt(input);
      });
      function parseWeekday(input, locale2) {
        if (typeof input !== "string") {
          return input;
        }
        if (!isNaN(input)) {
          return parseInt(input, 10);
        }
        input = locale2.weekdaysParse(input);
        if (typeof input === "number") {
          return input;
        }
        return null;
      }
      function parseIsoWeekday(input, locale2) {
        if (typeof input === "string") {
          return locale2.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
      }
      function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
      }
      var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
      function localeWeekdays(m, format2) {
        var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
        return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
      }
      function localeWeekdaysShort(m) {
        return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
      }
      function localeWeekdaysMin(m) {
        return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
      }
      function handleStrictParse$1(weekdayName, format2, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._minWeekdaysParse = [];
          for (i = 0; i < 7; ++i) {
            mom = createUTC([2e3, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(
              mom,
              ""
            ).toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(
              mom,
              ""
            ).toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format2 === "dddd") {
            ii = indexOf.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format2 === "ddd") {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format2 === "dddd") {
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format2 === "ddd") {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeWeekdaysParse(weekdayName, format2, strict) {
        var i, mom, regex;
        if (this._weekdaysParseExact) {
          return handleStrictParse$1.call(this, weekdayName, format2, strict);
        }
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._minWeekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._fullWeekdaysParse = [];
        }
        for (i = 0; i < 7; i++) {
          mom = createUTC([2e3, 1]).day(i);
          if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp(
              "^" + this.weekdays(mom, "").replace(".", "\\.?") + "$",
              "i"
            );
            this._shortWeekdaysParse[i] = new RegExp(
              "^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$",
              "i"
            );
            this._minWeekdaysParse[i] = new RegExp(
              "^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$",
              "i"
            );
          }
          if (!this._weekdaysParse[i]) {
            regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
            this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i");
          }
          if (strict && format2 === "dddd" && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format2 === "dd" && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
          }
        }
      }
      function getSetDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var day = get(this, "Day");
        if (input != null) {
          input = parseWeekday(input, this.localeData());
          return this.add(input - day, "d");
        } else {
          return day;
        }
      }
      function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, "d");
      }
      function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          var weekday = parseIsoWeekday(input, this.localeData());
          return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
          return this.day() || 7;
        }
      }
      function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysStrictRegex;
          } else {
            return this._weekdaysRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            this._weekdaysRegex = defaultWeekdaysRegex;
          }
          return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
      }
      function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysShortStrictRegex;
          } else {
            return this._weekdaysShortRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysShortRegex")) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
          }
          return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
      }
      function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysMinStrictRegex;
          } else {
            return this._weekdaysMinRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysMinRegex")) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
          }
          return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
      }
      function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
          mom = createUTC([2e3, 1]).day(i);
          minp = regexEscape(this.weekdaysMin(mom, ""));
          shortp = regexEscape(this.weekdaysShort(mom, ""));
          longp = regexEscape(this.weekdays(mom, ""));
          minPieces.push(minp);
          shortPieces.push(shortp);
          longPieces.push(longp);
          mixedPieces.push(minp);
          mixedPieces.push(shortp);
          mixedPieces.push(longp);
        }
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp(
          "^(" + longPieces.join("|") + ")",
          "i"
        );
        this._weekdaysShortStrictRegex = new RegExp(
          "^(" + shortPieces.join("|") + ")",
          "i"
        );
        this._weekdaysMinStrictRegex = new RegExp(
          "^(" + minPieces.join("|") + ")",
          "i"
        );
      }
      function hFormat() {
        return this.hours() % 12 || 12;
      }
      function kFormat() {
        return this.hours() || 24;
      }
      addFormatToken("H", ["HH", 2], 0, "hour");
      addFormatToken("h", ["hh", 2], 0, hFormat);
      addFormatToken("k", ["kk", 2], 0, kFormat);
      addFormatToken("hmm", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
      });
      addFormatToken("hmmss", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      addFormatToken("Hmm", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2);
      });
      addFormatToken("Hmmss", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      function meridiem(token2, lowercase) {
        addFormatToken(token2, 0, 0, function() {
          return this.localeData().meridiem(
            this.hours(),
            this.minutes(),
            lowercase
          );
        });
      }
      meridiem("a", true);
      meridiem("A", false);
      function matchMeridiem(isStrict, locale2) {
        return locale2._meridiemParse;
      }
      addRegexToken("a", matchMeridiem);
      addRegexToken("A", matchMeridiem);
      addRegexToken("H", match1to2, match1to2HasZero);
      addRegexToken("h", match1to2, match1to2NoLeadingZero);
      addRegexToken("k", match1to2, match1to2NoLeadingZero);
      addRegexToken("HH", match1to2, match2);
      addRegexToken("hh", match1to2, match2);
      addRegexToken("kk", match1to2, match2);
      addRegexToken("hmm", match3to4);
      addRegexToken("hmmss", match5to6);
      addRegexToken("Hmm", match3to4);
      addRegexToken("Hmmss", match5to6);
      addParseToken(["H", "HH"], HOUR);
      addParseToken(["k", "kk"], function(input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
      });
      addParseToken(["a", "A"], function(input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
      });
      addParseToken(["h", "hh"], function(input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("Hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
      });
      addParseToken("Hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
      });
      function localeIsPM(input) {
        return (input + "").toLowerCase().charAt(0) === "p";
      }
      var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
      function localeMeridiem(hours2, minutes2, isLower) {
        if (hours2 > 11) {
          return isLower ? "pm" : "PM";
        } else {
          return isLower ? "am" : "AM";
        }
      }
      var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
      };
      var locales = {}, localeFamilies = {}, globalLocale;
      function commonPrefix(arr1, arr2) {
        var i, minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
          if (arr1[i] !== arr2[i]) {
            return i;
          }
        }
        return minl;
      }
      function normalizeLocale(key) {
        return key ? key.toLowerCase().replace("_", "-") : key;
      }
      function chooseLocale(names) {
        var i = 0, j, next, locale2, split;
        while (i < names.length) {
          split = normalizeLocale(names[i]).split("-");
          j = split.length;
          next = normalizeLocale(names[i + 1]);
          next = next ? next.split("-") : null;
          while (j > 0) {
            locale2 = loadLocale(split.slice(0, j).join("-"));
            if (locale2) {
              return locale2;
            }
            if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
              break;
            }
            j--;
          }
          i++;
        }
        return globalLocale;
      }
      function isLocaleNameSane(name) {
        return !!(name && name.match("^[^/\\\\]*$"));
      }
      function loadLocale(name) {
        var oldLocale = null, aliasedRequire;
        if (locales[name] === void 0 && typeof module2 !== "undefined" && module2 && module2.exports && isLocaleNameSane(name)) {
          try {
            oldLocale = globalLocale._abbr;
            aliasedRequire = require;
            aliasedRequire("./locale/" + name);
            getSetGlobalLocale(oldLocale);
          } catch (e) {
            locales[name] = null;
          }
        }
        return locales[name];
      }
      function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
          if (isUndefined(values)) {
            data = getLocale(key);
          } else {
            data = defineLocale(key, values);
          }
          if (data) {
            globalLocale = data;
          } else {
            if (typeof console !== "undefined" && console.warn) {
              console.warn(
                "Locale " + key + " not found. Did you forget to load it?"
              );
            }
          }
        }
        return globalLocale._abbr;
      }
      function defineLocale(name, config) {
        if (config !== null) {
          var locale2, parentConfig = baseConfig;
          config.abbr = name;
          if (locales[name] != null) {
            deprecateSimple(
              "defineLocaleOverride",
              "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
            );
            parentConfig = locales[name]._config;
          } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
              parentConfig = locales[config.parentLocale]._config;
            } else {
              locale2 = loadLocale(config.parentLocale);
              if (locale2 != null) {
                parentConfig = locale2._config;
              } else {
                if (!localeFamilies[config.parentLocale]) {
                  localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                  name,
                  config
                });
                return null;
              }
            }
          }
          locales[name] = new Locale(mergeConfigs(parentConfig, config));
          if (localeFamilies[name]) {
            localeFamilies[name].forEach(function(x) {
              defineLocale(x.name, x.config);
            });
          }
          getSetGlobalLocale(name);
          return locales[name];
        } else {
          delete locales[name];
          return null;
        }
      }
      function updateLocale(name, config) {
        if (config != null) {
          var locale2, tmpLocale, parentConfig = baseConfig;
          if (locales[name] != null && locales[name].parentLocale != null) {
            locales[name].set(mergeConfigs(locales[name]._config, config));
          } else {
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
              parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            if (tmpLocale == null) {
              config.abbr = name;
            }
            locale2 = new Locale(config);
            locale2.parentLocale = locales[name];
            locales[name] = locale2;
          }
          getSetGlobalLocale(name);
        } else {
          if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
              locales[name] = locales[name].parentLocale;
              if (name === getSetGlobalLocale()) {
                getSetGlobalLocale(name);
              }
            } else if (locales[name] != null) {
              delete locales[name];
            }
          }
        }
        return locales[name];
      }
      function getLocale(key) {
        var locale2;
        if (key && key._locale && key._locale._abbr) {
          key = key._locale._abbr;
        }
        if (!key) {
          return globalLocale;
        }
        if (!isArray(key)) {
          locale2 = loadLocale(key);
          if (locale2) {
            return locale2;
          }
          key = [key];
        }
        return chooseLocale(key);
      }
      function listLocales() {
        return keys(locales);
      }
      function checkOverflow(m) {
        var overflow, a = m._a;
        if (a && getParsingFlags(m).overflow === -2) {
          overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
          if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
          }
          if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
          }
          if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
          }
          getParsingFlags(m).overflow = overflow;
        }
        return m;
      }
      var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
        ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
        ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
        ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
        ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
        ["YYYY-DDD", /\d{4}-\d{3}/],
        ["YYYY-MM", /\d{4}-\d\d/, false],
        ["YYYYYYMMDD", /[+-]\d{10}/],
        ["YYYYMMDD", /\d{8}/],
        ["GGGG[W]WWE", /\d{4}W\d{3}/],
        ["GGGG[W]WW", /\d{4}W\d{2}/, false],
        ["YYYYDDD", /\d{7}/],
        ["YYYYMM", /\d{6}/, false],
        ["YYYY", /\d{4}/, false]
      ], isoTimes = [
        ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
        ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
        ["HH:mm:ss", /\d\d:\d\d:\d\d/],
        ["HH:mm", /\d\d:\d\d/],
        ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
        ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
        ["HHmmss", /\d\d\d\d\d\d/],
        ["HHmm", /\d\d\d\d/],
        ["HH", /\d\d/]
      ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
      };
      function configFromISO(config) {
        var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
        if (match) {
          getParsingFlags(config).iso = true;
          for (i = 0, l = isoDatesLen; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
              dateFormat = isoDates[i][0];
              allowTime = isoDates[i][2] !== false;
              break;
            }
          }
          if (dateFormat == null) {
            config._isValid = false;
            return;
          }
          if (match[3]) {
            for (i = 0, l = isoTimesLen; i < l; i++) {
              if (isoTimes[i][1].exec(match[3])) {
                timeFormat = (match[2] || " ") + isoTimes[i][0];
                break;
              }
            }
            if (timeFormat == null) {
              config._isValid = false;
              return;
            }
          }
          if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
          }
          if (match[4]) {
            if (tzRegex.exec(match[4])) {
              tzFormat = "Z";
            } else {
              config._isValid = false;
              return;
            }
          }
          config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
          configFromStringAndFormat(config);
        } else {
          config._isValid = false;
        }
      }
      function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
          untruncateYear(yearStr),
          defaultLocaleMonthsShort.indexOf(monthStr),
          parseInt(dayStr, 10),
          parseInt(hourStr, 10),
          parseInt(minuteStr, 10)
        ];
        if (secondStr) {
          result.push(parseInt(secondStr, 10));
        }
        return result;
      }
      function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
          return 2e3 + year;
        } else if (year <= 999) {
          return 1900 + year;
        }
        return year;
      }
      function preprocessRFC2822(s) {
        return s.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
      }
      function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
          var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(
            parsedInput[0],
            parsedInput[1],
            parsedInput[2]
          ).getDay();
          if (weekdayProvided !== weekdayActual) {
            getParsingFlags(config).weekdayMismatch = true;
            config._isValid = false;
            return false;
          }
        }
        return true;
      }
      function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
          return obsOffsets[obsOffset];
        } else if (militaryOffset) {
          return 0;
        } else {
          var hm = parseInt(numOffset, 10), m = hm % 100, h = (hm - m) / 100;
          return h * 60 + m;
        }
      }
      function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
        if (match) {
          parsedArray = extractFromRFC2822Strings(
            match[4],
            match[3],
            match[2],
            match[5],
            match[6],
            match[7]
          );
          if (!checkWeekday(match[1], parsedArray, config)) {
            return;
          }
          config._a = parsedArray;
          config._tzm = calculateOffset(match[8], match[9], match[10]);
          config._d = createUTCDate.apply(null, config._a);
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
          getParsingFlags(config).rfc2822 = true;
        } else {
          config._isValid = false;
        }
      }
      function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
          config._d = /* @__PURE__ */ new Date(+matched[1]);
          return;
        }
        configFromISO(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        configFromRFC2822(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        if (config._strict) {
          config._isValid = false;
        } else {
          hooks.createFromInputFallback(config);
        }
      }
      hooks.createFromInputFallback = deprecate(
        "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
        function(config) {
          config._d = /* @__PURE__ */ new Date(config._i + (config._useUTC ? " UTC" : ""));
        }
      );
      function defaults(a, b, c) {
        if (a != null) {
          return a;
        }
        if (b != null) {
          return b;
        }
        return c;
      }
      function currentDateArray(config) {
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
          return [
            nowValue.getUTCFullYear(),
            nowValue.getUTCMonth(),
            nowValue.getUTCDate()
          ];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
      }
      function configFromArray(config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;
        if (config._d) {
          return;
        }
        currentDate = currentDateArray(config);
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
          dayOfYearFromWeekInfo(config);
        }
        if (config._dayOfYear != null) {
          yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
          if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
            getParsingFlags(config)._overflowDayOfYear = true;
          }
          date = createUTCDate(yearToUse, 0, config._dayOfYear);
          config._a[MONTH] = date.getUTCMonth();
          config._a[DATE] = date.getUTCDate();
        }
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
          config._a[i] = input[i] = currentDate[i];
        }
        for (; i < 7; i++) {
          config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        }
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
          config._nextDay = true;
          config._a[HOUR] = 0;
        }
        config._d = (config._useUTC ? createUTCDate : createDate).apply(
          null,
          input
        );
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
        if (config._tzm != null) {
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }
        if (config._nextDay) {
          config._a[HOUR] = 24;
        }
        if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) {
          getParsingFlags(config).weekdayMismatch = true;
        }
      }
      function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
          dow = 1;
          doy = 4;
          weekYear = defaults(
            w.GG,
            config._a[YEAR],
            weekOfYear(createLocal(), 1, 4).year
          );
          week = defaults(w.W, 1);
          weekday = defaults(w.E, 1);
          if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
          }
        } else {
          dow = config._locale._week.dow;
          doy = config._locale._week.doy;
          curWeek = weekOfYear(createLocal(), dow, doy);
          weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
          week = defaults(w.w, curWeek.week);
          if (w.d != null) {
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
              weekdayOverflow = true;
            }
          } else if (w.e != null) {
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
              weekdayOverflow = true;
            }
          } else {
            weekday = dow;
          }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
          getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
          getParsingFlags(config)._overflowWeekday = true;
        } else {
          temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
          config._a[YEAR] = temp.year;
          config._dayOfYear = temp.dayOfYear;
        }
      }
      hooks.ISO_8601 = function() {
      };
      hooks.RFC_2822 = function() {
      };
      function configFromStringAndFormat(config) {
        if (config._f === hooks.ISO_8601) {
          configFromISO(config);
          return;
        }
        if (config._f === hooks.RFC_2822) {
          configFromRFC2822(config);
          return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;
        var string = "" + config._i, i, parsedInput, tokens2, token2, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;
        tokens2 = expandFormat(config._f, config._locale).match(formattingTokens) || [];
        tokenLen = tokens2.length;
        for (i = 0; i < tokenLen; i++) {
          token2 = tokens2[i];
          parsedInput = (string.match(getParseRegexForToken(token2, config)) || [])[0];
          if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
              getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(
              string.indexOf(parsedInput) + parsedInput.length
            );
            totalParsedInputLength += parsedInput.length;
          }
          if (formatTokenFunctions[token2]) {
            if (parsedInput) {
              getParsingFlags(config).empty = false;
            } else {
              getParsingFlags(config).unusedTokens.push(token2);
            }
            addTimeToArrayFromToken(token2, parsedInput, config);
          } else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token2);
          }
        }
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
          getParsingFlags(config).unusedInput.push(string);
        }
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
          getParsingFlags(config).bigHour = void 0;
        }
        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        config._a[HOUR] = meridiemFixWrap(
          config._locale,
          config._a[HOUR],
          config._meridiem
        );
        era = getParsingFlags(config).era;
        if (era !== null) {
          config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }
        configFromArray(config);
        checkOverflow(config);
      }
      function meridiemFixWrap(locale2, hour, meridiem2) {
        var isPm;
        if (meridiem2 == null) {
          return hour;
        }
        if (locale2.meridiemHour != null) {
          return locale2.meridiemHour(hour, meridiem2);
        } else if (locale2.isPM != null) {
          isPm = locale2.isPM(meridiem2);
          if (isPm && hour < 12) {
            hour += 12;
          }
          if (!isPm && hour === 12) {
            hour = 0;
          }
          return hour;
        } else {
          return hour;
        }
      }
      function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config._f.length;
        if (configfLen === 0) {
          getParsingFlags(config).invalidFormat = true;
          config._d = /* @__PURE__ */ new Date(NaN);
          return;
        }
        for (i = 0; i < configfLen; i++) {
          currentScore = 0;
          validFormatFound = false;
          tempConfig = copyConfig({}, config);
          if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
          }
          tempConfig._f = config._f[i];
          configFromStringAndFormat(tempConfig);
          if (isValid(tempConfig)) {
            validFormatFound = true;
          }
          currentScore += getParsingFlags(tempConfig).charsLeftOver;
          currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
          getParsingFlags(tempConfig).score = currentScore;
          if (!bestFormatIsValid) {
            if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
              if (validFormatFound) {
                bestFormatIsValid = true;
              }
            }
          } else {
            if (currentScore < scoreToBeat) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
            }
          }
        }
        extend(config, bestMoment || tempConfig);
      }
      function configFromObject(config) {
        if (config._d) {
          return;
        }
        var i = normalizeObjectUnits(config._i), dayOrDate = i.day === void 0 ? i.date : i.day;
        config._a = map(
          [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
          function(obj) {
            return obj && parseInt(obj, 10);
          }
        );
        configFromArray(config);
      }
      function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
          res.add(1, "d");
          res._nextDay = void 0;
        }
        return res;
      }
      function prepareConfig(config) {
        var input = config._i, format2 = config._f;
        config._locale = config._locale || getLocale(config._l);
        if (input === null || format2 === void 0 && input === "") {
          return createInvalid({ nullInput: true });
        }
        if (typeof input === "string") {
          config._i = input = config._locale.preparse(input);
        }
        if (isMoment(input)) {
          return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
          config._d = input;
        } else if (isArray(format2)) {
          configFromStringAndArray(config);
        } else if (format2) {
          configFromStringAndFormat(config);
        } else {
          configFromInput(config);
        }
        if (!isValid(config)) {
          config._d = null;
        }
        return config;
      }
      function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
          config._d = new Date(hooks.now());
        } else if (isDate(input)) {
          config._d = new Date(input.valueOf());
        } else if (typeof input === "string") {
          configFromString(config);
        } else if (isArray(input)) {
          config._a = map(input.slice(0), function(obj) {
            return parseInt(obj, 10);
          });
          configFromArray(config);
        } else if (isObject(input)) {
          configFromObject(config);
        } else if (isNumber(input)) {
          config._d = new Date(input);
        } else {
          hooks.createFromInputFallback(config);
        }
      }
      function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
        var c = {};
        if (format2 === true || format2 === false) {
          strict = format2;
          format2 = void 0;
        }
        if (locale2 === true || locale2 === false) {
          strict = locale2;
          locale2 = void 0;
        }
        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
          input = void 0;
        }
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale2;
        c._i = input;
        c._f = format2;
        c._strict = strict;
        return createFromConfig(c);
      }
      function createLocal(input, format2, locale2, strict) {
        return createLocalOrUTC(input, format2, locale2, strict, false);
      }
      var prototypeMin = deprecate(
        "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
        function() {
          var other = createLocal.apply(null, arguments);
          if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
          } else {
            return createInvalid();
          }
        }
      ), prototypeMax = deprecate(
        "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
        function() {
          var other = createLocal.apply(null, arguments);
          if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
          } else {
            return createInvalid();
          }
        }
      );
      function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
          moments = moments[0];
        }
        if (!moments.length) {
          return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
          if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
          }
        }
        return res;
      }
      function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isBefore", args);
      }
      function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isAfter", args);
      }
      var now = function() {
        return Date.now ? Date.now() : +/* @__PURE__ */ new Date();
      };
      var ordering = [
        "year",
        "quarter",
        "month",
        "week",
        "day",
        "hour",
        "minute",
        "second",
        "millisecond"
      ];
      function isDurationValid(m) {
        var key, unitHasDecimal = false, i, orderLen = ordering.length;
        for (key in m) {
          if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
            return false;
          }
        }
        for (i = 0; i < orderLen; ++i) {
          if (m[ordering[i]]) {
            if (unitHasDecimal) {
              return false;
            }
            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
              unitHasDecimal = true;
            }
          }
        }
        return true;
      }
      function isValid$1() {
        return this._isValid;
      }
      function createInvalid$1() {
        return createDuration(NaN);
      }
      function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid(normalizedInput);
        this._milliseconds = +milliseconds2 + seconds2 * 1e3 + // 1000
        minutes2 * 6e4 + // 1000 * 60
        hours2 * 1e3 * 60 * 60;
        this._days = +days2 + weeks2 * 7;
        this._months = +months2 + quarters * 3 + years2 * 12;
        this._data = {};
        this._locale = getLocale();
        this._bubble();
      }
      function isDuration(obj) {
        return obj instanceof Duration;
      }
      function absRound(number) {
        if (number < 0) {
          return Math.round(-1 * number) * -1;
        } else {
          return Math.round(number);
        }
      }
      function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
        for (i = 0; i < len; i++) {
          if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
            diffs++;
          }
        }
        return diffs + lengthDiff;
      }
      function offset(token2, separator) {
        addFormatToken(token2, 0, 0, function() {
          var offset2 = this.utcOffset(), sign2 = "+";
          if (offset2 < 0) {
            offset2 = -offset2;
            sign2 = "-";
          }
          return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
        });
      }
      offset("Z", ":");
      offset("ZZ", "");
      addRegexToken("Z", matchShortOffset);
      addRegexToken("ZZ", matchShortOffset);
      addParseToken(["Z", "ZZ"], function(input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
      });
      var chunkOffset = /([\+\-]|\d\d)/gi;
      function offsetFromString(matcher, string) {
        var matches = (string || "").match(matcher), chunk, parts, minutes2;
        if (matches === null) {
          return null;
        }
        chunk = matches[matches.length - 1] || [];
        parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
        minutes2 = +(parts[1] * 60) + toInt(parts[2]);
        return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
      }
      function cloneWithOffset(input, model) {
        var res, diff2;
        if (model._isUTC) {
          res = model.clone();
          diff2 = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
          res._d.setTime(res._d.valueOf() + diff2);
          hooks.updateOffset(res, false);
          return res;
        } else {
          return createLocal(input).local();
        }
      }
      function getDateOffset(m) {
        return -Math.round(m._d.getTimezoneOffset());
      }
      hooks.updateOffset = function() {
      };
      function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset2 = this._offset || 0, localAdjust;
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          if (typeof input === "string") {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
              return this;
            }
          } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
          }
          if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
          }
          this._offset = input;
          this._isUTC = true;
          if (localAdjust != null) {
            this.add(localAdjust, "m");
          }
          if (offset2 !== input) {
            if (!keepLocalTime || this._changeInProgress) {
              addSubtract(
                this,
                createDuration(input - offset2, "m"),
                1,
                false
              );
            } else if (!this._changeInProgress) {
              this._changeInProgress = true;
              hooks.updateOffset(this, true);
              this._changeInProgress = null;
            }
          }
          return this;
        } else {
          return this._isUTC ? offset2 : getDateOffset(this);
        }
      }
      function getSetZone(input, keepLocalTime) {
        if (input != null) {
          if (typeof input !== "string") {
            input = -input;
          }
          this.utcOffset(input, keepLocalTime);
          return this;
        } else {
          return -this.utcOffset();
        }
      }
      function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
      }
      function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
          this.utcOffset(0, keepLocalTime);
          this._isUTC = false;
          if (keepLocalTime) {
            this.subtract(getDateOffset(this), "m");
          }
        }
        return this;
      }
      function setOffsetToParsedOffset() {
        if (this._tzm != null) {
          this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === "string") {
          var tZone = offsetFromString(matchOffset, this._i);
          if (tZone != null) {
            this.utcOffset(tZone);
          } else {
            this.utcOffset(0, true);
          }
        }
        return this;
      }
      function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
          return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
      }
      function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
      }
      function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
          return this._isDSTShifted;
        }
        var c = {}, other;
        copyConfig(c, this);
        c = prepareConfig(c);
        if (c._a) {
          other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
          this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
          this._isDSTShifted = false;
        }
        return this._isDSTShifted;
      }
      function isLocal() {
        return this.isValid() ? !this._isUTC : false;
      }
      function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
      }
      function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
      }
      var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
      function createDuration(input, key) {
        var duration = input, match = null, sign2, ret, diffRes;
        if (isDuration(input)) {
          duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months
          };
        } else if (isNumber(input) || !isNaN(+input)) {
          duration = {};
          if (key) {
            duration[key] = +input;
          } else {
            duration.milliseconds = +input;
          }
        } else if (match = aspNetRegex.exec(input)) {
          sign2 = match[1] === "-" ? -1 : 1;
          duration = {
            y: 0,
            d: toInt(match[DATE]) * sign2,
            h: toInt(match[HOUR]) * sign2,
            m: toInt(match[MINUTE]) * sign2,
            s: toInt(match[SECOND]) * sign2,
            ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2
            // the millisecond decimal point is included in the match
          };
        } else if (match = isoRegex.exec(input)) {
          sign2 = match[1] === "-" ? -1 : 1;
          duration = {
            y: parseIso(match[2], sign2),
            M: parseIso(match[3], sign2),
            w: parseIso(match[4], sign2),
            d: parseIso(match[5], sign2),
            h: parseIso(match[6], sign2),
            m: parseIso(match[7], sign2),
            s: parseIso(match[8], sign2)
          };
        } else if (duration == null) {
          duration = {};
        } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
          diffRes = momentsDifference(
            createLocal(duration.from),
            createLocal(duration.to)
          );
          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months;
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, "_locale")) {
          ret._locale = input._locale;
        }
        if (isDuration(input) && hasOwnProp(input, "_isValid")) {
          ret._isValid = input._isValid;
        }
        return ret;
      }
      createDuration.fn = Duration.prototype;
      createDuration.invalid = createInvalid$1;
      function parseIso(inp, sign2) {
        var res = inp && parseFloat(inp.replace(",", "."));
        return (isNaN(res) ? 0 : res) * sign2;
      }
      function positiveMomentsDifference(base, other) {
        var res = {};
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, "M").isAfter(other)) {
          --res.months;
        }
        res.milliseconds = +other - +base.clone().add(res.months, "M");
        return res;
      }
      function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
          return { milliseconds: 0, months: 0 };
        }
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
          res = positiveMomentsDifference(base, other);
        } else {
          res = positiveMomentsDifference(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months;
        }
        return res;
      }
      function createAdder(direction, name) {
        return function(val, period) {
          var dur, tmp;
          if (period !== null && !isNaN(+period)) {
            deprecateSimple(
              name,
              "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
            );
            tmp = val;
            val = period;
            period = tmp;
          }
          dur = createDuration(val, period);
          addSubtract(this, dur, direction);
          return this;
        };
      }
      function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
        if (!mom.isValid()) {
          return;
        }
        updateOffset = updateOffset == null ? true : updateOffset;
        if (months2) {
          setMonth(mom, get(mom, "Month") + months2 * isAdding);
        }
        if (days2) {
          set$1(mom, "Date", get(mom, "Date") + days2 * isAdding);
        }
        if (milliseconds2) {
          mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
        }
        if (updateOffset) {
          hooks.updateOffset(mom, days2 || months2);
        }
      }
      var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
      function isString(input) {
        return typeof input === "string" || input instanceof String;
      }
      function isMomentInput(input) {
        return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
      }
      function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
          "years",
          "year",
          "y",
          "months",
          "month",
          "M",
          "days",
          "day",
          "d",
          "dates",
          "date",
          "D",
          "hours",
          "hour",
          "h",
          "minutes",
          "minute",
          "m",
          "seconds",
          "second",
          "s",
          "milliseconds",
          "millisecond",
          "ms"
        ], i, property, propertyLen = properties.length;
        for (i = 0; i < propertyLen; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
      }
      function isNumberOrStringArray(input) {
        var arrayTest = isArray(input), dataTypeTest = false;
        if (arrayTest) {
          dataTypeTest = input.filter(function(item) {
            return !isNumber(item) && isString(input);
          }).length === 0;
        }
        return arrayTest && dataTypeTest;
      }
      function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
          "sameDay",
          "nextDay",
          "lastDay",
          "nextWeek",
          "lastWeek",
          "sameElse"
        ], i, property;
        for (i = 0; i < properties.length; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
      }
      function getCalendarFormat(myMoment, now2) {
        var diff2 = myMoment.diff(now2, "days", true);
        return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
      }
      function calendar$1(time, formats) {
        if (arguments.length === 1) {
          if (!arguments[0]) {
            time = void 0;
            formats = void 0;
          } else if (isMomentInput(arguments[0])) {
            time = arguments[0];
            formats = void 0;
          } else if (isCalendarSpec(arguments[0])) {
            formats = arguments[0];
            time = void 0;
          }
        }
        var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
        return this.format(
          output || this.localeData().calendar(format2, this, createLocal(now2))
        );
      }
      function clone() {
        return new Moment(this);
      }
      function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() > localInput.valueOf();
        } else {
          return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
      }
      function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() < localInput.valueOf();
        } else {
          return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
      }
      function isBetween(from2, to2, units, inclusivity) {
        var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
          return false;
        }
        inclusivity = inclusivity || "()";
        return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
      }
      function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input), inputMs;
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() === localInput.valueOf();
        } else {
          inputMs = localInput.valueOf();
          return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
      }
      function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
      }
      function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
      }
      function diff(input, units, asFloat) {
        var that, zoneDelta, output;
        if (!this.isValid()) {
          return NaN;
        }
        that = cloneWithOffset(input, this);
        if (!that.isValid()) {
          return NaN;
        }
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
        units = normalizeUnits(units);
        switch (units) {
          case "year":
            output = monthDiff(this, that) / 12;
            break;
          case "month":
            output = monthDiff(this, that);
            break;
          case "quarter":
            output = monthDiff(this, that) / 3;
            break;
          case "second":
            output = (this - that) / 1e3;
            break;
          // 1000
          case "minute":
            output = (this - that) / 6e4;
            break;
          // 1000 * 60
          case "hour":
            output = (this - that) / 36e5;
            break;
          // 1000 * 60 * 60
          case "day":
            output = (this - that - zoneDelta) / 864e5;
            break;
          // 1000 * 60 * 60 * 24, negate dst
          case "week":
            output = (this - that - zoneDelta) / 6048e5;
            break;
          // 1000 * 60 * 60 * 24 * 7, negate dst
          default:
            output = this - that;
        }
        return asFloat ? output : absFloor(output);
      }
      function monthDiff(a, b) {
        if (a.date() < b.date()) {
          return -monthDiff(b, a);
        }
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
        if (b - anchor < 0) {
          anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
          adjust = (b - anchor) / (anchor - anchor2);
        } else {
          anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
          adjust = (b - anchor) / (anchor2 - anchor);
        }
        return -(wholeMonthDiff + adjust) || 0;
      }
      hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
      hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
      function toString() {
        return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
      }
      function toISOString(keepOffset) {
        if (!this.isValid()) {
          return null;
        }
        var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
          return formatMoment(
            m,
            utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
          );
        }
        if (isFunction(Date.prototype.toISOString)) {
          if (utc) {
            return this.toDate().toISOString();
          } else {
            return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m, "Z"));
          }
        }
        return formatMoment(
          m,
          utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
        );
      }
      function inspect() {
        if (!this.isValid()) {
          return "moment.invalid(/* " + this._i + " */)";
        }
        var func = "moment", zone = "", prefix, year, datetime, suffix;
        if (!this.isLocal()) {
          func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
          zone = "Z";
        }
        prefix = "[" + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
        datetime = "-MM-DD[T]HH:mm:ss.SSS";
        suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix);
      }
      function format(inputString) {
        if (!inputString) {
          inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
      }
      function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
      }
      function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
      }
      function locale(key) {
        var newLocaleData;
        if (key === void 0) {
          return this._locale._abbr;
        } else {
          newLocaleData = getLocale(key);
          if (newLocaleData != null) {
            this._locale = newLocaleData;
          }
          return this;
        }
      }
      var lang = deprecate(
        "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
        function(key) {
          if (key === void 0) {
            return this.localeData();
          } else {
            return this.locale(key);
          }
        }
      );
      function localeData() {
        return this._locale;
      }
      var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
      function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
      }
      function localStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
          return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return new Date(y, m, d).valueOf();
        }
      }
      function utcStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
          return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return Date.UTC(y, m, d);
        }
      }
      function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === "millisecond" || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case "year":
            time = startOfDate(this.year(), 0, 1);
            break;
          case "quarter":
            time = startOfDate(
              this.year(),
              this.month() - this.month() % 3,
              1
            );
            break;
          case "month":
            time = startOfDate(this.year(), this.month(), 1);
            break;
          case "week":
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - this.weekday()
            );
            break;
          case "isoWeek":
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - (this.isoWeekday() - 1)
            );
            break;
          case "day":
          case "date":
            time = startOfDate(this.year(), this.month(), this.date());
            break;
          case "hour":
            time = this._d.valueOf();
            time -= mod$1(
              time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
              MS_PER_HOUR
            );
            break;
          case "minute":
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_MINUTE);
            break;
          case "second":
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_SECOND);
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === "millisecond" || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case "year":
            time = startOfDate(this.year() + 1, 0, 1) - 1;
            break;
          case "quarter":
            time = startOfDate(
              this.year(),
              this.month() - this.month() % 3 + 3,
              1
            ) - 1;
            break;
          case "month":
            time = startOfDate(this.year(), this.month() + 1, 1) - 1;
            break;
          case "week":
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - this.weekday() + 7
            ) - 1;
            break;
          case "isoWeek":
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - (this.isoWeekday() - 1) + 7
            ) - 1;
            break;
          case "day":
          case "date":
            time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
            break;
          case "hour":
            time = this._d.valueOf();
            time += MS_PER_HOUR - mod$1(
              time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
              MS_PER_HOUR
            ) - 1;
            break;
          case "minute":
            time = this._d.valueOf();
            time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
            break;
          case "second":
            time = this._d.valueOf();
            time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 6e4;
      }
      function unix() {
        return Math.floor(this.valueOf() / 1e3);
      }
      function toDate() {
        return new Date(this.valueOf());
      }
      function toArray() {
        var m = this;
        return [
          m.year(),
          m.month(),
          m.date(),
          m.hour(),
          m.minute(),
          m.second(),
          m.millisecond()
        ];
      }
      function toObject() {
        var m = this;
        return {
          years: m.year(),
          months: m.month(),
          date: m.date(),
          hours: m.hours(),
          minutes: m.minutes(),
          seconds: m.seconds(),
          milliseconds: m.milliseconds()
        };
      }
      function toJSON() {
        return this.isValid() ? this.toISOString() : null;
      }
      function isValid$2() {
        return isValid(this);
      }
      function parsingFlags() {
        return extend({}, getParsingFlags(this));
      }
      function invalidAt() {
        return getParsingFlags(this).overflow;
      }
      function creationData() {
        return {
          input: this._i,
          format: this._f,
          locale: this._locale,
          isUTC: this._isUTC,
          strict: this._strict
        };
      }
      addFormatToken("N", 0, 0, "eraAbbr");
      addFormatToken("NN", 0, 0, "eraAbbr");
      addFormatToken("NNN", 0, 0, "eraAbbr");
      addFormatToken("NNNN", 0, 0, "eraName");
      addFormatToken("NNNNN", 0, 0, "eraNarrow");
      addFormatToken("y", ["y", 1], "yo", "eraYear");
      addFormatToken("y", ["yy", 2], 0, "eraYear");
      addFormatToken("y", ["yyy", 3], 0, "eraYear");
      addFormatToken("y", ["yyyy", 4], 0, "eraYear");
      addRegexToken("N", matchEraAbbr);
      addRegexToken("NN", matchEraAbbr);
      addRegexToken("NNN", matchEraAbbr);
      addRegexToken("NNNN", matchEraName);
      addRegexToken("NNNNN", matchEraNarrow);
      addParseToken(
        ["N", "NN", "NNN", "NNNN", "NNNNN"],
        function(input, array, config, token2) {
          var era = config._locale.erasParse(input, token2, config._strict);
          if (era) {
            getParsingFlags(config).era = era;
          } else {
            getParsingFlags(config).invalidEra = input;
          }
        }
      );
      addRegexToken("y", matchUnsigned);
      addRegexToken("yy", matchUnsigned);
      addRegexToken("yyy", matchUnsigned);
      addRegexToken("yyyy", matchUnsigned);
      addRegexToken("yo", matchEraYearOrdinal);
      addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
      addParseToken(["yo"], function(input, array, config, token2) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
          match = input.match(config._locale._eraYearOrdinalRegex);
        }
        if (config._locale.eraYearOrdinalParse) {
          array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
          array[YEAR] = parseInt(input, 10);
        }
      });
      function localeEras(m, format2) {
        var i, l, date, eras = this._eras || getLocale("en")._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
          switch (typeof eras[i].since) {
            case "string":
              date = hooks(eras[i].since).startOf("day");
              eras[i].since = date.valueOf();
              break;
          }
          switch (typeof eras[i].until) {
            case "undefined":
              eras[i].until = Infinity;
              break;
            case "string":
              date = hooks(eras[i].until).startOf("day").valueOf();
              eras[i].until = date.valueOf();
              break;
          }
        }
        return eras;
      }
      function localeErasParse(eraName, format2, strict) {
        var i, l, eras = this.eras(), name, abbr, narrow;
        eraName = eraName.toUpperCase();
        for (i = 0, l = eras.length; i < l; ++i) {
          name = eras[i].name.toUpperCase();
          abbr = eras[i].abbr.toUpperCase();
          narrow = eras[i].narrow.toUpperCase();
          if (strict) {
            switch (format2) {
              case "N":
              case "NN":
              case "NNN":
                if (abbr === eraName) {
                  return eras[i];
                }
                break;
              case "NNNN":
                if (name === eraName) {
                  return eras[i];
                }
                break;
              case "NNNNN":
                if (narrow === eraName) {
                  return eras[i];
                }
                break;
            }
          } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
            return eras[i];
          }
        }
      }
      function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? 1 : -1;
        if (year === void 0) {
          return hooks(era.since).year();
        } else {
          return hooks(era.since).year() + (year - era.offset) * dir;
        }
      }
      function getEraName() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].name;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].name;
          }
        }
        return "";
      }
      function getEraNarrow() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].narrow;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].narrow;
          }
        }
        return "";
      }
      function getEraAbbr() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].abbr;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].abbr;
          }
        }
        return "";
      }
      function getEraYear() {
        var i, l, dir, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          dir = eras[i].since <= eras[i].until ? 1 : -1;
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
            return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
          }
        }
        return this.year();
      }
      function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNameRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
      }
      function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, "_erasAbbrRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
      }
      function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNarrowRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
      }
      function matchEraAbbr(isStrict, locale2) {
        return locale2.erasAbbrRegex(isStrict);
      }
      function matchEraName(isStrict, locale2) {
        return locale2.erasNameRegex(isStrict);
      }
      function matchEraNarrow(isStrict, locale2) {
        return locale2.erasNarrowRegex(isStrict);
      }
      function matchEraYearOrdinal(isStrict, locale2) {
        return locale2._eraYearOrdinalRegex || matchUnsigned;
      }
      function computeErasParse() {
        var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l, erasName, erasAbbr, erasNarrow, eras = this.eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          erasName = regexEscape(eras[i].name);
          erasAbbr = regexEscape(eras[i].abbr);
          erasNarrow = regexEscape(eras[i].narrow);
          namePieces.push(erasName);
          abbrPieces.push(erasAbbr);
          narrowPieces.push(erasNarrow);
          mixedPieces.push(erasName);
          mixedPieces.push(erasAbbr);
          mixedPieces.push(erasNarrow);
        }
        this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
        this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
        this._erasNarrowRegex = new RegExp(
          "^(" + narrowPieces.join("|") + ")",
          "i"
        );
      }
      addFormatToken(0, ["gg", 2], 0, function() {
        return this.weekYear() % 100;
      });
      addFormatToken(0, ["GG", 2], 0, function() {
        return this.isoWeekYear() % 100;
      });
      function addWeekYearFormatToken(token2, getter) {
        addFormatToken(0, [token2, token2.length], 0, getter);
      }
      addWeekYearFormatToken("gggg", "weekYear");
      addWeekYearFormatToken("ggggg", "weekYear");
      addWeekYearFormatToken("GGGG", "isoWeekYear");
      addWeekYearFormatToken("GGGGG", "isoWeekYear");
      addRegexToken("G", matchSigned);
      addRegexToken("g", matchSigned);
      addRegexToken("GG", match1to2, match2);
      addRegexToken("gg", match1to2, match2);
      addRegexToken("GGGG", match1to4, match4);
      addRegexToken("gggg", match1to4, match4);
      addRegexToken("GGGGG", match1to6, match6);
      addRegexToken("ggggg", match1to6, match6);
      addWeekParseToken(
        ["gggg", "ggggg", "GGGG", "GGGGG"],
        function(input, week, config, token2) {
          week[token2.substr(0, 2)] = toInt(input);
        }
      );
      addWeekParseToken(["gg", "GG"], function(input, week, config, token2) {
        week[token2] = hooks.parseTwoDigitYear(input);
      });
      function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(
          this,
          input,
          this.week(),
          this.weekday() + this.localeData()._week.dow,
          this.localeData()._week.dow,
          this.localeData()._week.doy
        );
      }
      function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(
          this,
          input,
          this.isoWeek(),
          this.isoWeekday(),
          1,
          4
        );
      }
      function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
      }
      function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
      }
      function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
      }
      function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
      }
      function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
          return weekOfYear(this, dow, doy).year;
        } else {
          weeksTarget = weeksInYear(input, dow, doy);
          if (week > weeksTarget) {
            week = weeksTarget;
          }
          return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
      }
      function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
      }
      addFormatToken("Q", 0, "Qo", "quarter");
      addRegexToken("Q", match1);
      addParseToken("Q", function(input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
      });
      function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
      }
      addFormatToken("D", ["DD", 2], "Do", "date");
      addRegexToken("D", match1to2, match1to2NoLeadingZero);
      addRegexToken("DD", match1to2, match2);
      addRegexToken("Do", function(isStrict, locale2) {
        return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
      });
      addParseToken(["D", "DD"], DATE);
      addParseToken("Do", function(input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
      });
      var getSetDayOfMonth = makeGetSet("Date", true);
      addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
      addRegexToken("DDD", match1to3);
      addRegexToken("DDDD", match3);
      addParseToken(["DDD", "DDDD"], function(input, array, config) {
        config._dayOfYear = toInt(input);
      });
      function getSetDayOfYear(input) {
        var dayOfYear = Math.round(
          (this.clone().startOf("day") - this.clone().startOf("year")) / 864e5
        ) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
      }
      addFormatToken("m", ["mm", 2], 0, "minute");
      addRegexToken("m", match1to2, match1to2HasZero);
      addRegexToken("mm", match1to2, match2);
      addParseToken(["m", "mm"], MINUTE);
      var getSetMinute = makeGetSet("Minutes", false);
      addFormatToken("s", ["ss", 2], 0, "second");
      addRegexToken("s", match1to2, match1to2HasZero);
      addRegexToken("ss", match1to2, match2);
      addParseToken(["s", "ss"], SECOND);
      var getSetSecond = makeGetSet("Seconds", false);
      addFormatToken("S", 0, 0, function() {
        return ~~(this.millisecond() / 100);
      });
      addFormatToken(0, ["SS", 2], 0, function() {
        return ~~(this.millisecond() / 10);
      });
      addFormatToken(0, ["SSS", 3], 0, "millisecond");
      addFormatToken(0, ["SSSS", 4], 0, function() {
        return this.millisecond() * 10;
      });
      addFormatToken(0, ["SSSSS", 5], 0, function() {
        return this.millisecond() * 100;
      });
      addFormatToken(0, ["SSSSSS", 6], 0, function() {
        return this.millisecond() * 1e3;
      });
      addFormatToken(0, ["SSSSSSS", 7], 0, function() {
        return this.millisecond() * 1e4;
      });
      addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
        return this.millisecond() * 1e5;
      });
      addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
        return this.millisecond() * 1e6;
      });
      addRegexToken("S", match1to3, match1);
      addRegexToken("SS", match1to3, match2);
      addRegexToken("SSS", match1to3, match3);
      var token, getSetMillisecond;
      for (token = "SSSS"; token.length <= 9; token += "S") {
        addRegexToken(token, matchUnsigned);
      }
      function parseMs(input, array) {
        array[MILLISECOND] = toInt(("0." + input) * 1e3);
      }
      for (token = "S"; token.length <= 9; token += "S") {
        addParseToken(token, parseMs);
      }
      getSetMillisecond = makeGetSet("Milliseconds", false);
      addFormatToken("z", 0, 0, "zoneAbbr");
      addFormatToken("zz", 0, 0, "zoneName");
      function getZoneAbbr() {
        return this._isUTC ? "UTC" : "";
      }
      function getZoneName() {
        return this._isUTC ? "Coordinated Universal Time" : "";
      }
      var proto = Moment.prototype;
      proto.add = add;
      proto.calendar = calendar$1;
      proto.clone = clone;
      proto.diff = diff;
      proto.endOf = endOf;
      proto.format = format;
      proto.from = from;
      proto.fromNow = fromNow;
      proto.to = to;
      proto.toNow = toNow;
      proto.get = stringGet;
      proto.invalidAt = invalidAt;
      proto.isAfter = isAfter;
      proto.isBefore = isBefore;
      proto.isBetween = isBetween;
      proto.isSame = isSame;
      proto.isSameOrAfter = isSameOrAfter;
      proto.isSameOrBefore = isSameOrBefore;
      proto.isValid = isValid$2;
      proto.lang = lang;
      proto.locale = locale;
      proto.localeData = localeData;
      proto.max = prototypeMax;
      proto.min = prototypeMin;
      proto.parsingFlags = parsingFlags;
      proto.set = stringSet;
      proto.startOf = startOf;
      proto.subtract = subtract;
      proto.toArray = toArray;
      proto.toObject = toObject;
      proto.toDate = toDate;
      proto.toISOString = toISOString;
      proto.inspect = inspect;
      if (typeof Symbol !== "undefined" && Symbol.for != null) {
        proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
          return "Moment<" + this.format() + ">";
        };
      }
      proto.toJSON = toJSON;
      proto.toString = toString;
      proto.unix = unix;
      proto.valueOf = valueOf;
      proto.creationData = creationData;
      proto.eraName = getEraName;
      proto.eraNarrow = getEraNarrow;
      proto.eraAbbr = getEraAbbr;
      proto.eraYear = getEraYear;
      proto.year = getSetYear;
      proto.isLeapYear = getIsLeapYear;
      proto.weekYear = getSetWeekYear;
      proto.isoWeekYear = getSetISOWeekYear;
      proto.quarter = proto.quarters = getSetQuarter;
      proto.month = getSetMonth;
      proto.daysInMonth = getDaysInMonth;
      proto.week = proto.weeks = getSetWeek;
      proto.isoWeek = proto.isoWeeks = getSetISOWeek;
      proto.weeksInYear = getWeeksInYear;
      proto.weeksInWeekYear = getWeeksInWeekYear;
      proto.isoWeeksInYear = getISOWeeksInYear;
      proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
      proto.date = getSetDayOfMonth;
      proto.day = proto.days = getSetDayOfWeek;
      proto.weekday = getSetLocaleDayOfWeek;
      proto.isoWeekday = getSetISODayOfWeek;
      proto.dayOfYear = getSetDayOfYear;
      proto.hour = proto.hours = getSetHour;
      proto.minute = proto.minutes = getSetMinute;
      proto.second = proto.seconds = getSetSecond;
      proto.millisecond = proto.milliseconds = getSetMillisecond;
      proto.utcOffset = getSetOffset;
      proto.utc = setOffsetToUTC;
      proto.local = setOffsetToLocal;
      proto.parseZone = setOffsetToParsedOffset;
      proto.hasAlignedHourOffset = hasAlignedHourOffset;
      proto.isDST = isDaylightSavingTime;
      proto.isLocal = isLocal;
      proto.isUtcOffset = isUtcOffset;
      proto.isUtc = isUtc;
      proto.isUTC = isUtc;
      proto.zoneAbbr = getZoneAbbr;
      proto.zoneName = getZoneName;
      proto.dates = deprecate(
        "dates accessor is deprecated. Use date instead.",
        getSetDayOfMonth
      );
      proto.months = deprecate(
        "months accessor is deprecated. Use month instead",
        getSetMonth
      );
      proto.years = deprecate(
        "years accessor is deprecated. Use year instead",
        getSetYear
      );
      proto.zone = deprecate(
        "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
        getSetZone
      );
      proto.isDSTShifted = deprecate(
        "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
        isDaylightSavingTimeShifted
      );
      function createUnix(input) {
        return createLocal(input * 1e3);
      }
      function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
      }
      function preParsePostFormat(string) {
        return string;
      }
      var proto$1 = Locale.prototype;
      proto$1.calendar = calendar;
      proto$1.longDateFormat = longDateFormat;
      proto$1.invalidDate = invalidDate;
      proto$1.ordinal = ordinal;
      proto$1.preparse = preParsePostFormat;
      proto$1.postformat = preParsePostFormat;
      proto$1.relativeTime = relativeTime;
      proto$1.pastFuture = pastFuture;
      proto$1.set = set;
      proto$1.eras = localeEras;
      proto$1.erasParse = localeErasParse;
      proto$1.erasConvertYear = localeErasConvertYear;
      proto$1.erasAbbrRegex = erasAbbrRegex;
      proto$1.erasNameRegex = erasNameRegex;
      proto$1.erasNarrowRegex = erasNarrowRegex;
      proto$1.months = localeMonths;
      proto$1.monthsShort = localeMonthsShort;
      proto$1.monthsParse = localeMonthsParse;
      proto$1.monthsRegex = monthsRegex;
      proto$1.monthsShortRegex = monthsShortRegex;
      proto$1.week = localeWeek;
      proto$1.firstDayOfYear = localeFirstDayOfYear;
      proto$1.firstDayOfWeek = localeFirstDayOfWeek;
      proto$1.weekdays = localeWeekdays;
      proto$1.weekdaysMin = localeWeekdaysMin;
      proto$1.weekdaysShort = localeWeekdaysShort;
      proto$1.weekdaysParse = localeWeekdaysParse;
      proto$1.weekdaysRegex = weekdaysRegex;
      proto$1.weekdaysShortRegex = weekdaysShortRegex;
      proto$1.weekdaysMinRegex = weekdaysMinRegex;
      proto$1.isPM = localeIsPM;
      proto$1.meridiem = localeMeridiem;
      function get$1(format2, index, field, setter) {
        var locale2 = getLocale(), utc = createUTC().set(setter, index);
        return locale2[field](utc, format2);
      }
      function listMonthsImpl(format2, index, field) {
        if (isNumber(format2)) {
          index = format2;
          format2 = void 0;
        }
        format2 = format2 || "";
        if (index != null) {
          return get$1(format2, index, field, "month");
        }
        var i, out = [];
        for (i = 0; i < 12; i++) {
          out[i] = get$1(format2, i, field, "month");
        }
        return out;
      }
      function listWeekdaysImpl(localeSorted, format2, index, field) {
        if (typeof localeSorted === "boolean") {
          if (isNumber(format2)) {
            index = format2;
            format2 = void 0;
          }
          format2 = format2 || "";
        } else {
          format2 = localeSorted;
          index = format2;
          localeSorted = false;
          if (isNumber(format2)) {
            index = format2;
            format2 = void 0;
          }
          format2 = format2 || "";
        }
        var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i, out = [];
        if (index != null) {
          return get$1(format2, (index + shift) % 7, field, "day");
        }
        for (i = 0; i < 7; i++) {
          out[i] = get$1(format2, (i + shift) % 7, field, "day");
        }
        return out;
      }
      function listMonths(format2, index) {
        return listMonthsImpl(format2, index, "months");
      }
      function listMonthsShort(format2, index) {
        return listMonthsImpl(format2, index, "monthsShort");
      }
      function listWeekdays(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdays");
      }
      function listWeekdaysShort(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdaysShort");
      }
      function listWeekdaysMin(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdaysMin");
      }
      getSetGlobalLocale("en", {
        eras: [
          {
            since: "0001-01-01",
            until: Infinity,
            offset: 1,
            name: "Anno Domini",
            narrow: "AD",
            abbr: "AD"
          },
          {
            since: "0000-12-31",
            until: -Infinity,
            offset: 1,
            name: "Before Christ",
            narrow: "BC",
            abbr: "BC"
          }
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function(number) {
          var b = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
          return number + output;
        }
      });
      hooks.lang = deprecate(
        "moment.lang is deprecated. Use moment.locale instead.",
        getSetGlobalLocale
      );
      hooks.langData = deprecate(
        "moment.langData is deprecated. Use moment.localeData instead.",
        getLocale
      );
      var mathAbs = Math.abs;
      function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
      }
      function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
      }
      function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
      }
      function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
      }
      function absCeil(number) {
        if (number < 0) {
          return Math.floor(number);
        } else {
          return Math.ceil(number);
        }
      }
      function bubble() {
        var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
        if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
          milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
          days2 = 0;
          months2 = 0;
        }
        data.milliseconds = milliseconds2 % 1e3;
        seconds2 = absFloor(milliseconds2 / 1e3);
        data.seconds = seconds2 % 60;
        minutes2 = absFloor(seconds2 / 60);
        data.minutes = minutes2 % 60;
        hours2 = absFloor(minutes2 / 60);
        data.hours = hours2 % 24;
        days2 += absFloor(hours2 / 24);
        monthsFromDays = absFloor(daysToMonths(days2));
        months2 += monthsFromDays;
        days2 -= absCeil(monthsToDays(monthsFromDays));
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        data.days = days2;
        data.months = months2;
        data.years = years2;
        return this;
      }
      function daysToMonths(days2) {
        return days2 * 4800 / 146097;
      }
      function monthsToDays(months2) {
        return months2 * 146097 / 4800;
      }
      function as(units) {
        if (!this.isValid()) {
          return NaN;
        }
        var days2, months2, milliseconds2 = this._milliseconds;
        units = normalizeUnits(units);
        if (units === "month" || units === "quarter" || units === "year") {
          days2 = this._days + milliseconds2 / 864e5;
          months2 = this._months + daysToMonths(days2);
          switch (units) {
            case "month":
              return months2;
            case "quarter":
              return months2 / 3;
            case "year":
              return months2 / 12;
          }
        } else {
          days2 = this._days + Math.round(monthsToDays(this._months));
          switch (units) {
            case "week":
              return days2 / 7 + milliseconds2 / 6048e5;
            case "day":
              return days2 + milliseconds2 / 864e5;
            case "hour":
              return days2 * 24 + milliseconds2 / 36e5;
            case "minute":
              return days2 * 1440 + milliseconds2 / 6e4;
            case "second":
              return days2 * 86400 + milliseconds2 / 1e3;
            // Math.floor prevents floating point math errors here
            case "millisecond":
              return Math.floor(days2 * 864e5) + milliseconds2;
            default:
              throw new Error("Unknown unit " + units);
          }
        }
      }
      function makeAs(alias) {
        return function() {
          return this.as(alias);
        };
      }
      var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y"), valueOf$1 = asMilliseconds;
      function clone$1() {
        return createDuration(this);
      }
      function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + "s"]() : NaN;
      }
      function makeGetter(name) {
        return function() {
          return this.isValid() ? this._data[name] : NaN;
        };
      }
      var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
      function weeks() {
        return absFloor(this.days() / 7);
      }
      var round = Math.round, thresholds = {
        ss: 44,
        // a few seconds to seconds
        s: 45,
        // seconds to minute
        m: 45,
        // minutes to hour
        h: 22,
        // hours to day
        d: 26,
        // days to month/week
        w: null,
        // weeks to month
        M: 11
        // months to year
      };
      function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale2) {
        return locale2.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
      }
      function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
        var duration = createDuration(posNegDuration).abs(), seconds2 = round(duration.as("s")), minutes2 = round(duration.as("m")), hours2 = round(duration.as("h")), days2 = round(duration.as("d")), months2 = round(duration.as("M")), weeks2 = round(duration.as("w")), years2 = round(duration.as("y")), a = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
        if (thresholds2.w != null) {
          a = a || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
        }
        a = a || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale2;
        return substituteTimeAgo.apply(null, a);
      }
      function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === void 0) {
          return round;
        }
        if (typeof roundingFunction === "function") {
          round = roundingFunction;
          return true;
        }
        return false;
      }
      function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === void 0) {
          return false;
        }
        if (limit === void 0) {
          return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === "s") {
          thresholds.ss = limit - 1;
        }
        return true;
      }
      function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var withSuffix = false, th = thresholds, locale2, output;
        if (typeof argWithSuffix === "object") {
          argThresholds = argWithSuffix;
          argWithSuffix = false;
        }
        if (typeof argWithSuffix === "boolean") {
          withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === "object") {
          th = Object.assign({}, thresholds, argThresholds);
          if (argThresholds.s != null && argThresholds.ss == null) {
            th.ss = argThresholds.s - 1;
          }
        }
        locale2 = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale2);
        if (withSuffix) {
          output = locale2.pastFuture(+this, output);
        }
        return locale2.postformat(output);
      }
      var abs$1 = Math.abs;
      function sign(x) {
        return (x > 0) - (x < 0) || +x;
      }
      function toISOString$1() {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
        if (!total) {
          return "P0D";
        }
        minutes2 = absFloor(seconds2 / 60);
        hours2 = absFloor(minutes2 / 60);
        seconds2 %= 60;
        minutes2 %= 60;
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
        totalSign = total < 0 ? "-" : "";
        ymSign = sign(this._months) !== sign(total) ? "-" : "";
        daysSign = sign(this._days) !== sign(total) ? "-" : "";
        hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
        return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s + "S" : "");
      }
      var proto$2 = Duration.prototype;
      proto$2.isValid = isValid$1;
      proto$2.abs = abs;
      proto$2.add = add$1;
      proto$2.subtract = subtract$1;
      proto$2.as = as;
      proto$2.asMilliseconds = asMilliseconds;
      proto$2.asSeconds = asSeconds;
      proto$2.asMinutes = asMinutes;
      proto$2.asHours = asHours;
      proto$2.asDays = asDays;
      proto$2.asWeeks = asWeeks;
      proto$2.asMonths = asMonths;
      proto$2.asQuarters = asQuarters;
      proto$2.asYears = asYears;
      proto$2.valueOf = valueOf$1;
      proto$2._bubble = bubble;
      proto$2.clone = clone$1;
      proto$2.get = get$2;
      proto$2.milliseconds = milliseconds;
      proto$2.seconds = seconds;
      proto$2.minutes = minutes;
      proto$2.hours = hours;
      proto$2.days = days;
      proto$2.weeks = weeks;
      proto$2.months = months;
      proto$2.years = years;
      proto$2.humanize = humanize;
      proto$2.toISOString = toISOString$1;
      proto$2.toString = toISOString$1;
      proto$2.toJSON = toISOString$1;
      proto$2.locale = locale;
      proto$2.localeData = localeData;
      proto$2.toIsoString = deprecate(
        "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
        toISOString$1
      );
      proto$2.lang = lang;
      addFormatToken("X", 0, 0, "unix");
      addFormatToken("x", 0, 0, "valueOf");
      addRegexToken("x", matchSigned);
      addRegexToken("X", matchTimestamp);
      addParseToken("X", function(input, array, config) {
        config._d = new Date(parseFloat(input) * 1e3);
      });
      addParseToken("x", function(input, array, config) {
        config._d = new Date(toInt(input));
      });
      hooks.version = "2.30.1";
      setHookCallback(createLocal);
      hooks.fn = proto;
      hooks.min = min;
      hooks.max = max;
      hooks.now = now;
      hooks.utc = createUTC;
      hooks.unix = createUnix;
      hooks.months = listMonths;
      hooks.isDate = isDate;
      hooks.locale = getSetGlobalLocale;
      hooks.invalid = createInvalid;
      hooks.duration = createDuration;
      hooks.isMoment = isMoment;
      hooks.weekdays = listWeekdays;
      hooks.parseZone = createInZone;
      hooks.localeData = getLocale;
      hooks.isDuration = isDuration;
      hooks.monthsShort = listMonthsShort;
      hooks.weekdaysMin = listWeekdaysMin;
      hooks.defineLocale = defineLocale;
      hooks.updateLocale = updateLocale;
      hooks.locales = listLocales;
      hooks.weekdaysShort = listWeekdaysShort;
      hooks.normalizeUnits = normalizeUnits;
      hooks.relativeTimeRounding = getSetRelativeTimeRounding;
      hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
      hooks.calendarFormat = getCalendarFormat;
      hooks.prototype = proto;
      hooks.HTML5_FMT = {
        DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
        // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
        // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
        // <input type="datetime-local" step="0.001" />
        DATE: "YYYY-MM-DD",
        // <input type="date" />
        TIME: "HH:mm",
        // <input type="time" />
        TIME_SECONDS: "HH:mm:ss",
        // <input type="time" step="1" />
        TIME_MS: "HH:mm:ss.SSS",
        // <input type="time" step="0.001" />
        WEEK: "GGGG-[W]WW",
        // <input type="week" />
        MONTH: "YYYY-MM"
        // <input type="month" />
      };
      return hooks;
    });
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PrescriptionTrackerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");
var import_moment = __toESM(require_moment());

// src/settings.ts
var import_obsidian = require("obsidian");
var FolderSuggest = class extends import_obsidian.AbstractInputSuggest {
  constructor(app, textInputEl) {
    super(app, textInputEl);
    this.textInputEl = textInputEl;
  }
  getSuggestions(inputStr) {
    const abstractFiles = this.app.vault.getAllLoadedFiles();
    const folders = [];
    const lowerCaseInputStr = inputStr.toLowerCase();
    abstractFiles.forEach((folder) => {
      if (folder instanceof import_obsidian.TFolder) {
        if (folder.path.toLowerCase().contains(lowerCaseInputStr)) {
          folders.push(folder);
        }
      }
    });
    return folders;
  }
  renderSuggestion(folder, el) {
    el.setText(folder.path);
  }
  selectSuggestion(folder) {
    this.textInputEl.value = folder.path;
    this.textInputEl.trigger("input");
    this.close();
  }
};
var PrescriptionTrackerSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Prescription Tracker Settings" });
    new import_obsidian.Setting(containerEl).setName("Prescription Folder").setDesc("Folder where prescription notes will be stored").addText((text) => {
      text.setPlaceholder("Prescriptions").setValue(this.plugin.settings.prescriptionFolder).onChange(async (value) => {
        this.plugin.settings.prescriptionFolder = value;
        await this.plugin.saveSettings();
      });
      new FolderSuggest(this.app, text.inputEl);
    });
    new import_obsidian.Setting(containerEl).setName("Date Organization").setDesc("How to organize notes by date within the prescription folder. Use YYYY for year, MM for month, DD for day.").addText((text) => {
      text.setPlaceholder("YYYY/YYYY-MM").setValue(this.plugin.settings.dateOrganization).onChange(async (value) => {
        this.plugin.settings.dateOrganization = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("p", {
      text: "Note: Folders will be created automatically if they don't exist.",
      cls: "setting-item-description"
    });
    containerEl.createEl("h3", { text: "Pharmacy Management" });
    const pharmacyListEl = containerEl.createDiv();
    this.updatePharmacyList(pharmacyListEl);
    new import_obsidian.Setting(containerEl).setName("Add New Pharmacy").setDesc("Add a new pharmacy to the list").addText((text) => {
      var _a;
      text.setPlaceholder("Enter pharmacy name");
      const addButton = (_a = text.inputEl.parentElement) == null ? void 0 : _a.createEl("button", {
        text: "Add",
        cls: "mod-cta"
      });
      if (addButton) {
        addButton.style.marginLeft = "10px";
        addButton.onclick = async () => {
          const pharmacyName = text.getValue().trim();
          if (pharmacyName && !this.plugin.settings.pharmacyList.includes(pharmacyName)) {
            this.plugin.settings.pharmacyList.push(pharmacyName);
            await this.plugin.saveSettings();
            text.setValue("");
            this.updatePharmacyList(pharmacyListEl);
          }
        };
      }
    });
    containerEl.createEl("h3", { text: "Patient Management" });
    containerEl.createEl("h4", { text: "Select People Notes as Patients" });
    const selectedPatientNotesEl = containerEl.createDiv();
    this.updateSelectedPatientNotesList(selectedPatientNotesEl);
    new import_obsidian.Setting(containerEl).setName("Add People Note as Patient").setDesc("Select a person from your People notes to add as a patient option").addDropdown((dropdown) => {
      dropdown.addOption("", "Select a person...");
      const peopleFolder = this.app.vault.getAbstractFileByPath(this.plugin.settings.peopleFolder);
      if (peopleFolder && peopleFolder instanceof import_obsidian.TFolder) {
        const files = this.app.vault.getMarkdownFiles().filter(
          (file) => file.path.startsWith(this.plugin.settings.peopleFolder + "/")
        );
        files.forEach((file) => {
          if (!this.plugin.settings.selectedPatientNotes.includes(file.basename)) {
            dropdown.addOption(file.basename, file.basename);
          }
        });
      }
      dropdown.onChange(async (value) => {
        if (value && !this.plugin.settings.selectedPatientNotes.includes(value)) {
          this.plugin.settings.selectedPatientNotes.push(value);
          await this.plugin.saveSettings();
          this.updateSelectedPatientNotesList(selectedPatientNotesEl);
          this.display();
        }
      });
    });
    containerEl.createEl("h3", { text: "People Notes Integration" });
    new import_obsidian.Setting(containerEl).setName("People Folder").setDesc("Folder containing your people notes (used to find prescribing doctors)").addSearch((search) => {
      new FolderSuggest(this.app, search.inputEl);
      search.setPlaceholder("e.g., People").setValue(this.plugin.settings.peopleFolder).onChange(async (value) => {
        this.plugin.settings.peopleFolder = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Relationship Property").setDesc('YAML property name that specifies the relationship (e.g., "relationship", "role", "type")').addText((text) => text.setPlaceholder("e.g., relationship").setValue(this.plugin.settings.relationshipProperty).onChange(async (value) => {
      this.plugin.settings.relationshipProperty = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Doctor Relationship Value").setDesc("Value that identifies someone as a prescribing doctor (works with both string and list properties)").addText((text) => text.setPlaceholder("e.g., doctor").setValue(this.plugin.settings.doctorRelationshipValue).onChange(async (value) => {
      this.plugin.settings.doctorRelationshipValue = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Medications Integration" });
    new import_obsidian.Setting(containerEl).setName("Medications Folder").setDesc("Folder containing your medication notes (used to populate medication dropdown)").addSearch((search) => {
      new FolderSuggest(this.app, search.inputEl);
      search.setPlaceholder("e.g., Medications").setValue(this.plugin.settings.medicationsFolder).onChange(async (value) => {
        this.plugin.settings.medicationsFolder = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h3", { text: "Diagnosis Integration" });
    new import_obsidian.Setting(containerEl).setName("Diagnosis Folder").setDesc("Folder containing your diagnosis notes (used to populate diagnosis dropdown)").addSearch((search) => {
      new FolderSuggest(this.app, search.inputEl);
      search.setPlaceholder("e.g., Diagnosis").setValue(this.plugin.settings.diagnosisFolder).onChange(async (value) => {
        this.plugin.settings.diagnosisFolder = value;
        await this.plugin.saveSettings();
      });
    });
  }
  updatePharmacyList(containerEl) {
    containerEl.empty();
    if (this.plugin.settings.pharmacyList.length === 0) {
      containerEl.createEl("p", { text: "No pharmacies added yet." });
      return;
    }
    const listEl = containerEl.createEl("ul");
    this.plugin.settings.pharmacyList.forEach((pharmacy, index) => {
      const listItem = listEl.createEl("li");
      listItem.style.display = "flex";
      listItem.style.justifyContent = "space-between";
      listItem.style.alignItems = "center";
      listItem.style.marginBottom = "5px";
      listItem.createEl("span", { text: pharmacy });
      const removeButton = listItem.createEl("button", {
        text: "Remove",
        cls: "mod-warning"
      });
      removeButton.style.marginLeft = "10px";
      removeButton.onclick = async () => {
        this.plugin.settings.pharmacyList.splice(index, 1);
        await this.plugin.saveSettings();
        this.updatePharmacyList(containerEl);
      };
    });
  }
  updateSelectedPatientNotesList(containerEl) {
    containerEl.empty();
    if (this.plugin.settings.selectedPatientNotes.length === 0) {
      containerEl.createEl("p", { text: "No People notes selected as patients yet." });
      return;
    }
    const listEl = containerEl.createEl("ul");
    this.plugin.settings.selectedPatientNotes.forEach((patientNote, index) => {
      const listItem = listEl.createEl("li");
      listItem.style.display = "flex";
      listItem.style.justifyContent = "space-between";
      listItem.style.alignItems = "center";
      listItem.style.marginBottom = "5px";
      listItem.createEl("span", { text: patientNote });
      const removeButton = listItem.createEl("button", {
        text: "Remove",
        cls: "mod-warning"
      });
      removeButton.style.marginLeft = "10px";
      removeButton.onclick = async () => {
        this.plugin.settings.selectedPatientNotes.splice(index, 1);
        await this.plugin.saveSettings();
        this.updateSelectedPatientNotesList(containerEl);
      };
    });
  }
};

// src/generateMedNote.ts
var import_obsidian2 = require("obsidian");
function createCleanDescription(indication) {
  try {
    let clean = indication.replace(/<[^>]+>/g, "").replace(/&nbsp;/g, " ").replace(/&amp;/g, "&").replace(/\s+/g, " ").trim();
    clean = clean.replace(/^\d+(\.\d+)?\s+[A-Z\s]+(?=\s+[A-Z][a-z])/g, "");
    const treatmentMatch = clean.match(/(?:indicated for|used for|treatment of|for the treatment of):\s*(.+?)(?:\.|$)/i);
    if (treatmentMatch) {
      let conditions = treatmentMatch[1].trim();
      conditions = conditions.replace(/\s+Acute Treatment of\s+/g, ", acute episodes of ").replace(/\s+Adjunctive Treatment of\s+/g, ", as add-on treatment for ").replace(/\s+associated with\s+/gi, " in people with ").replace(/Major Depressive Disorder/g, "major depression").replace(/Bipolar I Disorder/g, "bipolar disorder").replace(/Autistic Disorder/g, "autism").replace(/Tourette\'s Disorder/g, "Tourette's syndrome");
      if (conditions.length > 10) {
        return `Used to treat ${conditions.toLowerCase()}.`;
      }
    }
    const indicatedMatch = clean.match(/(.+?)\s+is indicated\s+(?:for|in)\s+(.+?)(?:\.|$)/i);
    if (indicatedMatch && indicatedMatch[2]) {
      let condition = indicatedMatch[2].trim();
      if (condition.length > 10) {
        return `Used to treat ${condition.toLowerCase()}.`;
      }
    }
    const medNameMatch = clean.match(/([A-Z][a-z]+(?:\s+[A-Z][a-z]+)*)\s+(?:gel|cream|tablet|capsule|solution).*?(?:is|are)\s+(.+?)(?:\.|$)/i);
    if (medNameMatch && medNameMatch[2]) {
      let description = medNameMatch[2].trim();
      if (description.length > 10 && description.toLowerCase().includes("indicated")) {
        description = description.replace(/indicated\s+(?:for|in)\s+/i, "");
        return `Used to treat ${description.toLowerCase()}.`;
      }
    }
    const sentences = clean.split(/[.!?]+/);
    for (const sentence of sentences) {
      const trimmed = sentence.trim();
      if (trimmed.length > 20 && trimmed.length < 200) {
        if (/(?:treat|indicated|used|therapy|condition|acne|dermatitis|psoriasis)/i.test(trimmed)) {
          return trimmed.charAt(0).toUpperCase() + trimmed.slice(1).toLowerCase() + ".";
        }
      }
    }
    if (/(?:acne|comedone|blackhead|whitehead|pimple)/i.test(clean)) {
      return "Used to treat acne and related skin conditions.";
    }
    console.log(`\u26A0\uFE0F Could not extract meaningful description from: "${clean.substring(0, 100)}..."`);
    return "";
  } catch (error) {
    console.error("Error creating clean description:", error);
    return "";
  }
}
async function getOpenFDADetails(drugName) {
  var _a, _b, _c, _d;
  try {
    console.log(`\u{1F50D} Searching OpenFDA for: "${drugName}"`);
    const labelResponse = await fetch(`https://api.fda.gov/drug/label.json?search=openfda.brand_name:"${encodeURIComponent(drugName)}"+OR+openfda.generic_name:"${encodeURIComponent(drugName)}"&limit=1`);
    const labelData = await labelResponse.json();
    if (labelData.results && labelData.results.length > 0) {
      const result = labelData.results[0];
      console.log(`\u2705 Found OpenFDA labeling data for: ${drugName}`);
      let genericName = "";
      if (((_a = result.openfda) == null ? void 0 : _a.generic_name) && result.openfda.generic_name.length > 0) {
        genericName = result.openfda.generic_name[0].toLowerCase().replace(/\b\w/g, (l) => l.toUpperCase());
        console.log(`\u2705 Found generic name from OpenFDA: "${genericName}"`);
      }
      let description = "";
      if (result.indications_and_usage && result.indications_and_usage.length > 0) {
        description = createCleanDescription(result.indications_and_usage[0]);
        if (description) {
          console.log(`\u2705 Created clean description from OpenFDA`);
        }
      }
      return {
        drug_class: ((_b = result.openfda) == null ? void 0 : _b.pharm_class_epc) || ((_c = result.openfda) == null ? void 0 : _c.pharm_class_moa) || [],
        generic_names: genericName ? [genericName] : [],
        brand_names: ((_d = result.openfda) == null ? void 0 : _d.brand_name) || [],
        what_is_description: description || null
      };
    } else {
      console.log(`\u2139\uFE0F No OpenFDA data found for: ${drugName}`);
      return null;
    }
  } catch (error) {
    console.error(`\u274C OpenFDA API error for ${drugName}:`, error);
    return null;
  }
}
async function searchMedications(query) {
  const searchTerm = query.trim();
  if (searchTerm.length < 2) {
    return [];
  }
  console.log(`\u{1F50D} Searching for medication: "${searchTerm}"`);
  try {
    const results = await searchRxNorm(searchTerm);
    console.log(`\u2705 Found ${results.length} results from RxNorm API`);
    if (results.length > 0) {
      return results;
    }
    console.log(`\u2139\uFE0F No RxNorm results found, creating basic entry for "${searchTerm}"`);
    return [{
      title: searchTerm,
      name: searchTerm,
      generic_names: [],
      brand_names: [searchTerm],
      drug_class: [],
      approved_use: [],
      mechanism_of_action: "Consult medical references and prescribing information",
      dosage_forms: [],
      standard_dosage: "Consult prescribing information for dosing guidelines",
      side_effects: {
        common: [],
        serious: []
      },
      contraindications: [],
      warnings: [],
      interactions: [],
      approval_date: "",
      manufacturer: "",
      source: `https://www.drugs.com/${searchTerm.toLowerCase().replace(/[^a-z0-9]/g, "-")}.html`,
      isFromAPI: false,
      searchScore: 50
    }];
  } catch (error) {
    console.error("\u274C Error searching RxNorm API:", error);
    return [{
      title: searchTerm,
      name: searchTerm,
      generic_names: [],
      brand_names: [searchTerm],
      drug_class: [],
      approved_use: [],
      mechanism_of_action: "API search failed - consult medical references",
      dosage_forms: [],
      standard_dosage: "Consult prescribing information for dosing",
      side_effects: {
        common: [],
        serious: []
      },
      contraindications: [],
      warnings: [],
      interactions: [],
      approval_date: "",
      manufacturer: "",
      source: `https://www.drugs.com/${searchTerm.toLowerCase().replace(/[^a-z0-9]/g, "-")}.html`,
      isFromAPI: false,
      searchScore: 25
    }];
  }
}
async function searchRxNorm(query) {
  var _a, _b, _c, _d, _e, _f;
  try {
    console.log(`\u{1F310} Starting RxNorm API search for: "${query}"`);
    const results = [];
    const seenNames = /* @__PURE__ */ new Set();
    try {
      console.log(`\u{1F4CD} Trying direct RXCUI lookup...`);
      const rxcuiResponse = await fetch(`https://rxnav.nlm.nih.gov/REST/rxcui.json?name=${encodeURIComponent(query)}&search=1`);
      const rxcuiData = await rxcuiResponse.json();
      if ((_a = rxcuiData.idGroup) == null ? void 0 : _a.rxnormId) {
        const rxcuis = Array.isArray(rxcuiData.idGroup.rxnormId) ? rxcuiData.idGroup.rxnormId : [rxcuiData.idGroup.rxnormId];
        console.log(`\u2705 Found ${rxcuis.length} direct RXCUI matches`);
        for (const rxcui of rxcuis.slice(0, 5)) {
          const details = await getRxNormDetails(rxcui);
          if (details && !seenNames.has(details.name.toLowerCase())) {
            seenNames.add(details.name.toLowerCase());
            results.push(createMedicationResult(details, rxcui, 100, true));
          }
        }
      }
    } catch (error) {
      console.log(`\u26A0\uFE0F Direct RXCUI lookup failed:`, error);
    }
    try {
      console.log(`\u{1F50D} Trying approximate term search...`);
      const approxResponse = await fetch(`https://rxnav.nlm.nih.gov/REST/approximateTerm.json?term=${encodeURIComponent(query)}&maxEntries=20`);
      const approxData = await approxResponse.json();
      if ((_b = approxData.approximateGroup) == null ? void 0 : _b.candidate) {
        const candidates = Array.isArray(approxData.approximateGroup.candidate) ? approxData.approximateGroup.candidate : [approxData.approximateGroup.candidate];
        console.log(`\u2705 Found ${candidates.length} approximate matches`);
        for (const candidate of candidates.slice(0, 10)) {
          const candidateName = candidate.candidate.toLowerCase();
          if (!seenNames.has(candidateName)) {
            seenNames.add(candidateName);
            const details = await getRxNormDetails(candidate.rxcui);
            if (details) {
              results.push(createMedicationResult(details, candidate.rxcui, candidate.score || 90, true));
            }
          }
        }
      }
    } catch (error) {
      console.log(`\u26A0\uFE0F Approximate term search failed:`, error);
    }
    try {
      console.log(`\u{1F4DD} Trying spelling suggestions...`);
      const spellResponse = await fetch(`https://rxnav.nlm.nih.gov/REST/spellingsuggestions.json?name=${encodeURIComponent(query)}`);
      const spellData = await spellResponse.json();
      if ((_d = (_c = spellData.suggestionGroup) == null ? void 0 : _c.suggestionList) == null ? void 0 : _d.suggestion) {
        const suggestions = Array.isArray(spellData.suggestionGroup.suggestionList.suggestion) ? spellData.suggestionGroup.suggestionList.suggestion : [spellData.suggestionGroup.suggestionList.suggestion];
        console.log(`\u2705 Found ${suggestions.length} spelling suggestions`);
        for (const suggestion of suggestions.slice(0, 8)) {
          const suggestionName = suggestion.toLowerCase();
          if (!seenNames.has(suggestionName)) {
            seenNames.add(suggestionName);
            const suggestionRxcuiResponse = await fetch(`https://rxnav.nlm.nih.gov/REST/rxcui.json?name=${encodeURIComponent(suggestion)}&search=1`);
            const suggestionRxcuiData = await suggestionRxcuiResponse.json();
            if ((_e = suggestionRxcuiData.idGroup) == null ? void 0 : _e.rxnormId) {
              const rxcuis = Array.isArray(suggestionRxcuiData.idGroup.rxnormId) ? suggestionRxcuiData.idGroup.rxnormId : [suggestionRxcuiData.idGroup.rxnormId];
              const firstRxcui = rxcuis[0];
              const details = await getRxNormDetails(firstRxcui);
              if (details) {
                results.push(createMedicationResult(details, firstRxcui, 85, true));
              }
            }
          }
        }
      }
    } catch (error) {
      console.log(`\u26A0\uFE0F Spelling suggestions failed:`, error);
    }
    if (results.length > 0 && results.length < 5) {
      try {
        console.log(`\u{1F517} Trying related concepts search...`);
        const firstResult = results[0];
        if (firstResult.rxcui) {
          const relatedResponse = await fetch(`https://rxnav.nlm.nih.gov/REST/rxcui/${firstResult.rxcui}/related.json?tty=BN+SBD+GPCK+IN`);
          const relatedData = await relatedResponse.json();
          if ((_f = relatedData.relatedGroup) == null ? void 0 : _f.conceptGroup) {
            const conceptGroups = Array.isArray(relatedData.relatedGroup.conceptGroup) ? relatedData.relatedGroup.conceptGroup : [relatedData.relatedGroup.conceptGroup];
            conceptGroups.forEach((group) => {
              if (group.conceptProperties && results.length < 8) {
                const concepts = Array.isArray(group.conceptProperties) ? group.conceptProperties : [group.conceptProperties];
                concepts.slice(0, 3).forEach((concept) => {
                  const conceptName = concept.name.toLowerCase();
                  if (!seenNames.has(conceptName)) {
                    seenNames.add(conceptName);
                    results.push(createMedicationResult({
                      name: concept.name,
                      generic_names: [],
                      // Let OpenFDA determine what's generic
                      brand_names: [concept.name],
                      // Treat concept names as brand names initially
                      drug_class: [],
                      dosage_forms: []
                    }, concept.rxcui, 75, true));
                  }
                });
              }
            });
          }
        }
      } catch (error) {
        console.log(`\u26A0\uFE0F Related concepts search failed:`, error);
      }
    }
    results.sort((a, b) => (b.searchScore || 0) - (a.searchScore || 0));
    const uniqueResults = results.slice(0, 8);
    console.log(`\u{1F3AF} Final RxNorm results for "${query}":`, uniqueResults.map((r) => `${r.title} (score: ${r.searchScore})`));
    return uniqueResults;
  } catch (error) {
    console.error("\u{1F6A8} RxNorm API search completely failed:", error);
    return [];
  }
}
function createMedicationResult(details, rxcui, score, isFromAPI) {
  return {
    title: details.name || "Unknown",
    name: details.name || "Unknown",
    generic_names: details.generic_names || [],
    // Start with empty, let OpenFDA fill this
    brand_names: details.brand_names || [details.name || "Unknown"],
    // Include the main name as a brand name by default
    drug_class: details.drug_class || [],
    approved_use: [],
    mechanism_of_action: "Consult medical references and prescribing information",
    dosage_forms: details.dosage_forms || [],
    standard_dosage: "Consult prescribing information for dosing guidelines",
    side_effects: {
      common: [],
      serious: []
    },
    contraindications: [],
    warnings: [],
    interactions: [],
    approval_date: "",
    manufacturer: "",
    source: `https://www.drugs.com/${(details.name || "unknown").toLowerCase().replace(/[^a-z0-9]/g, "-")}.html`,
    rxcui,
    isFromAPI,
    searchScore: score
  };
}
async function getRxNormDetails(rxcui) {
  var _a;
  try {
    console.log(`\u{1F4CB} Getting details for RXCUI: ${rxcui}`);
    const propsResponse = await fetch(`https://rxnav.nlm.nih.gov/REST/rxcui/${rxcui}/properties.json`);
    const propsData = await propsResponse.json();
    if (!propsData.properties) {
      console.log(`\u26A0\uFE0F No properties found for RXCUI: ${rxcui}`);
      return null;
    }
    const props = propsData.properties;
    const name = props.name || "";
    console.log(`\u2705 Found basic properties for: ${name}`);
    const relatedResponse = await fetch(`https://rxnav.nlm.nih.gov/REST/rxcui/${rxcui}/related.json?tty=BN+SBD+GPCK+IN+MIN`);
    const relatedData = await relatedResponse.json();
    const brandNames = [];
    const dosageForms = [];
    if ((_a = relatedData.relatedGroup) == null ? void 0 : _a.conceptGroup) {
      const conceptGroups = Array.isArray(relatedData.relatedGroup.conceptGroup) ? relatedData.relatedGroup.conceptGroup : [relatedData.relatedGroup.conceptGroup];
      conceptGroups.forEach((group) => {
        if (group.conceptProperties) {
          const concepts = Array.isArray(group.conceptProperties) ? group.conceptProperties : [group.conceptProperties];
          concepts.forEach((concept) => {
            if (concept.name) {
              if (concept.tty === "BN" && !brandNames.includes(concept.name)) {
                brandNames.push(concept.name);
              }
              if ((concept.tty === "SBD" || concept.tty === "GPCK") && concept.name.includes(" ")) {
                const formMatch = concept.name.match(/\b(tablet|capsule|injection|liquid|cream|ointment|gel|solution|suspension|powder|spray|patch|suppository)\b/i);
                if (formMatch && !dosageForms.includes(formMatch[1])) {
                  dosageForms.push(formMatch[1]);
                }
              }
            }
          });
        }
      });
    }
    if (brandNames.length === 0) {
      brandNames.push(name);
    }
    console.log(`\u{1F4CA} Details for ${name}: ${brandNames.length} brand names, ${dosageForms.length} dosage forms`);
    return {
      name,
      generic_names: [],
      // Don't assume RxNorm name is generic - let OpenFDA provide the real generic name
      brand_names: brandNames,
      // Include all brand names including the main name if it's a brand
      drug_class: [],
      dosage_forms: dosageForms
    };
  } catch (error) {
    console.error(`\u274C Error getting RxNorm details for RXCUI ${rxcui}:`, error);
    return null;
  }
}
async function generateMedicationNote(medicationData, medicationsFolder, app, allowOverwrite = false) {
  const medData = { ...medicationData };
  if (medData.title) {
    medData.title = medData.title.toLowerCase().replace(/\b\w/g, (l) => l.toUpperCase());
    console.log(`\u{1F524} Formatted title to Title Case: "${medData.title}"`);
  }
  console.log(`\u{1F504} Enriching medication data for: ${medData.title}`);
  const fdaData = await getOpenFDADetails(medData.title);
  if (fdaData) {
    console.log(`\u2705 Enriched with FDA data`);
    medData.drug_class = fdaData.drug_class && fdaData.drug_class.length > 0 ? fdaData.drug_class : medData.drug_class;
    if (fdaData.generic_names && fdaData.generic_names.length > 0) {
      console.log(`\u{1F4DD} Adding OpenFDA generic names: ${fdaData.generic_names.join(", ")}`);
      medData.generic_names = [...medData.generic_names || [], ...fdaData.generic_names].filter((name, index, arr) => arr.findIndex((n) => n.toLowerCase() === name.toLowerCase()) === index);
    }
    if (fdaData.brand_names && fdaData.brand_names.length > 0) {
      console.log(`\u{1F4DD} Adding OpenFDA brand names: ${fdaData.brand_names.join(", ")}`);
      medData.brand_names = [...medData.brand_names || [], ...fdaData.brand_names].filter((name, index, arr) => arr.findIndex((n) => n.toLowerCase() === name.toLowerCase()) === index);
    } else {
      if (medData.generic_names && medData.generic_names.length > 0) {
        const titleInGeneric = medData.generic_names.some((g) => g.toLowerCase() === medData.title.toLowerCase());
        if (!titleInGeneric) {
          medData.brand_names = [...medData.brand_names || [], medData.title].filter((name, index, arr) => arr.findIndex((n) => n.toLowerCase() === name.toLowerCase()) === index);
        }
      }
    }
    if (medData.generic_names && medData.brand_names) {
      const genericNamesLower = medData.generic_names.map((name) => name.toLowerCase());
      medData.brand_names = medData.brand_names.filter(
        (brandName) => !genericNamesLower.includes(brandName.toLowerCase())
      );
      console.log(`\u{1F9F9} Cleaned brand names to remove generic duplicates: [${medData.brand_names.join(", ")}]`);
    }
    if (fdaData.what_is_description) {
      console.log(`\u{1F4DD} Using OpenFDA description: "${fdaData.what_is_description.substring(0, 50)}..."`);
      medData.what_is_description = fdaData.what_is_description;
    }
  }
  const allAliases = [
    ...medData.generic_names || [],
    ...medData.brand_names || []
  ].filter(
    (name, index, arr) => name && // Not empty
    name.toLowerCase() !== medData.title.toLowerCase() && // Not the same as title (to avoid duplication in aliases)
    arr.findIndex((n) => n.toLowerCase() === name.toLowerCase()) === index
    // Remove duplicates within aliases
  );
  console.log(`\u{1F527} Final generic_names: [${(medData.generic_names || []).join(", ")}]`);
  console.log(`\u{1F527} Final brand_names: [${(medData.brand_names || []).join(", ")}]`);
  console.log(`\u{1F527} Final aliases: [${allAliases.join(", ")}]`);
  console.log(`\u{1F527} Final medData.what_is_description: ${medData.what_is_description ? "present" : "missing"}`);
  const yamlFrontmatter = `---
title: ${medData.title}
${medData.generic_names && medData.generic_names.length > 0 ? `generic_names:
${medData.generic_names.map((name) => `  - ${name}`).join("\n")}` : ""}
${medData.brand_names && medData.brand_names.length > 0 ? `brand_names:
${medData.brand_names.map((name) => `  - ${name}`).join("\n")}` : ""}
${allAliases.length > 0 ? `aliases:
${allAliases.map((name) => `  - ${name}`).join("\n")}` : ""}
${medData.dosage_forms && medData.dosage_forms.length > 0 ? `dosage_forms:
${medData.dosage_forms.map((form) => `  - ${form}`).join("\n")}` : ""}
${medData.drug_class && medData.drug_class.length > 0 ? `drug_class:
${medData.drug_class.map((cls) => `  - ${cls}`).join("\n")}` : ""}
---`;
  const drugsComUrl = `https://www.drugs.com/${medData.title.toLowerCase().replace(/[^a-z0-9]/g, "-")}.html`;
  const goodRxUrl = `https://www.goodrx.com/${medData.title.toLowerCase().replace(/[^a-z0-9]/g, "-")}/what-is`;
  let noteBody = `# ${medData.title}

`;
  if (medData.what_is_description) {
    noteBody += `${medData.what_is_description}

`;
  }
  noteBody += `## Additional Resources

`;
  noteBody += `- [Drugs.com - Complete Drug Information](${drugsComUrl})
`;
  noteBody += `- [GoodRx - What is ${medData.title}?](${goodRxUrl})
`;
  const fileName = `${medData.title}.md`;
  const fileContent = `${yamlFrontmatter}
${noteBody}`;
  try {
    const normalizedPath = (0, import_obsidian2.normalizePath)(medicationsFolder);
    const folder = app.vault.getAbstractFileByPath(normalizedPath);
    if (!folder) {
      await app.vault.createFolder(normalizedPath);
    }
    const filePath = (0, import_obsidian2.normalizePath)(`${medicationsFolder}/${fileName}`);
    let existingFile = app.vault.getAbstractFileByPath(filePath);
    if (!existingFile) {
      const allFiles = app.vault.getMarkdownFiles();
      const targetDir = (0, import_obsidian2.normalizePath)(medicationsFolder);
      existingFile = allFiles.find(
        (file) => file.path.toLowerCase() === filePath.toLowerCase() && file.path.startsWith(targetDir)
      ) || null;
      if (existingFile) {
        console.log(`\u{1F50D} Found case-insensitive match: ${existingFile.path} for ${filePath}`);
      }
    }
    console.log(`\u{1F50D} Checking for existing file at: ${filePath}`);
    console.log(`\u{1F50D} Existing file found: ${existingFile ? "YES" : "NO"}`);
    if (existingFile) {
      console.log(`\u{1F50D} Existing file path: ${existingFile.path}`);
    }
    console.log(`\u{1F50D} Allow overwrite: ${allowOverwrite}`);
    if (existingFile) {
      if (allowOverwrite) {
        console.log(`\u{1F4DD} File already exists, overwriting: ${fileName}`);
        await app.vault.modify(existingFile, fileContent);
        console.log(`\u2705 Medication note updated: ${fileName}`);
      } else {
        console.log(`\u26A0\uFE0F File already exists, not overwriting: ${fileName}`);
        throw new Error(`Medication note already exists: ${fileName}`);
      }
    } else {
      console.log(`\u{1F4DD} Creating new file: ${fileName}`);
      try {
        await app.vault.create(filePath, fileContent);
        console.log(`\u2705 Medication note created: ${fileName}`);
      } catch (createError) {
        console.log(`\u274C Error creating file: ${createError.message}`);
        if (createError.message && createError.message.toLowerCase().includes("already exists")) {
          if (allowOverwrite) {
            console.log(`\u{1F4DD} File exists, trying to overwrite via modify...`);
            let existingFileRetry = app.vault.getAbstractFileByPath(filePath);
            if (!existingFileRetry) {
              const allFiles = app.vault.getMarkdownFiles();
              const targetDir = (0, import_obsidian2.normalizePath)(medicationsFolder);
              existingFileRetry = allFiles.find(
                (file) => file.path.toLowerCase() === filePath.toLowerCase() && file.path.startsWith(targetDir)
              ) || null;
              if (existingFileRetry) {
                console.log(`\u{1F4DD} Found existing file via case-insensitive search: ${existingFileRetry.path}`);
              }
            }
            if (existingFileRetry) {
              await app.vault.modify(existingFileRetry, fileContent);
              console.log(`\u2705 Medication note updated via retry: ${existingFileRetry.name}`);
              return existingFileRetry.path;
            } else {
              throw new Error(`Could not find file to overwrite: ${fileName}`);
            }
          } else {
            throw new Error(`Medication note already exists: ${fileName}`);
          }
        } else {
          throw createError;
        }
      }
    }
    return filePath;
  } catch (err) {
    console.error(`\u274C Failed to create medication note:`, err);
    throw err;
  }
}

// src/main.ts
function createDatePlaceholders(momentDate) {
  return {
    "YYYY": momentDate.format("YYYY"),
    "YY": momentDate.format("YY"),
    "MMMM": momentDate.format("MMMM"),
    "MMM": momentDate.format("MMM"),
    "MM": momentDate.format("MM"),
    "M": momentDate.format("M"),
    "DDDD": momentDate.format("dddd"),
    "DDD": momentDate.format("ddd"),
    "DD": momentDate.format("DD"),
    "D": momentDate.format("D")
  };
}
function replacePlaceholders(str, placeholders) {
  return str.replace(
    /YYYY|YY|MMMM|MMM|MM|M|DDDD|DDD|DD|D/g,
    (match) => String(placeholders[match] || match)
  );
}
function getDateBasedPath(dateStr, baseFolder, dateOrganization) {
  const momentDate = (0, import_moment.default)(dateStr);
  const placeholders = createDatePlaceholders(momentDate);
  const subFolder = replacePlaceholders(dateOrganization, placeholders);
  return (0, import_obsidian3.normalizePath)(`${baseFolder}/${subFolder}`);
}
var DEFAULT_SETTINGS = {
  prescriptionFolder: "Prescriptions",
  dateOrganization: "YYYY/YYYY-MM",
  pharmacyList: ["CVS Pharmacy", "Walgreens", "Rite Aid"],
  peopleFolder: "People",
  relationshipProperty: "relationship",
  doctorRelationshipValue: "doctor",
  medicationsFolder: "Medications",
  diagnosisFolder: "Diagnosis",
  selectedPatientNotes: []
};
var PrescriptionTrackerPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("pill", "Add Prescription", (evt) => {
      new PrescriptionModal(this.app, this).open();
    });
    ribbonIconEl.addClass("prescription-tracker-ribbon-class");
    this.addCommand({
      id: "add-prescription",
      name: "Add new prescription",
      callback: () => {
        new PrescriptionModal(this.app, this).open();
      }
    });
    this.addCommand({
      id: "create-medication-note",
      name: "Create medication note",
      callback: () => {
        this.promptForMedicationName();
      }
    });
    this.addCommand({
      id: "convert-medication-note",
      name: "Convert current file to new medication structure",
      callback: () => {
        this.convertCurrentMedicationNote();
      }
    });
    this.addSettingTab(new PrescriptionTrackerSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async getDoctorsFromPeopleNotes() {
    var _a;
    const doctors = [];
    console.log("Looking for people folder:", this.settings.peopleFolder);
    const peopleFolder = this.app.vault.getAbstractFileByPath(this.settings.peopleFolder);
    if (!peopleFolder || !(peopleFolder instanceof import_obsidian3.TFolder)) {
      console.log("People folder not found or not a folder");
      return doctors;
    }
    console.log("People folder found, scanning files...");
    const files = this.app.vault.getMarkdownFiles().filter(
      (file) => file.path.startsWith(this.settings.peopleFolder + "/")
    );
    console.log("Found files in people folder:", files.length);
    for (const file of files) {
      try {
        const content = await this.app.vault.read(file);
        const frontmatter = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
        console.log(`Checking file ${file.path}, frontmatter:`, frontmatter);
        if (frontmatter && frontmatter[this.settings.relationshipProperty]) {
          const relationshipValue = frontmatter[this.settings.relationshipProperty];
          let isDoctor = false;
          if (Array.isArray(relationshipValue)) {
            isDoctor = relationshipValue.includes(this.settings.doctorRelationshipValue);
            console.log(`Array property: ${relationshipValue}, contains '${this.settings.doctorRelationshipValue}': ${isDoctor}`);
          } else if (typeof relationshipValue === "string") {
            isDoctor = relationshipValue === this.settings.doctorRelationshipValue;
            console.log(`String property: '${relationshipValue}', matches '${this.settings.doctorRelationshipValue}': ${isDoctor}`);
          }
          if (isDoctor) {
            const displayName = frontmatter.name || file.basename;
            doctors.push({
              name: displayName,
              link: `[[${file.basename}]]`
            });
            console.log(`Added doctor: ${displayName}`);
          }
        } else {
          console.log(`File ${file.path} has no '${this.settings.relationshipProperty}' property`);
        }
      } catch (error) {
        console.warn("Error reading file:", file.path, error);
      }
    }
    console.log("Total doctors found:", doctors.length);
    return doctors.sort((a, b) => a.name.localeCompare(b.name));
  }
  async getPatientsFromPeopleNotes() {
    var _a;
    const patients = [];
    for (const selectedPatient of this.settings.selectedPatientNotes) {
      const file = this.app.vault.getAbstractFileByPath(`${this.settings.peopleFolder}/${selectedPatient}.md`);
      if (file && file instanceof import_obsidian3.TFile) {
        try {
          const frontmatter = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
          const displayName = (frontmatter == null ? void 0 : frontmatter.name) || selectedPatient;
          patients.push({
            name: displayName,
            link: `[[${selectedPatient}]]`
          });
        } catch (error) {
          console.warn("Error reading selected patient file:", selectedPatient, error);
        }
      }
    }
    return patients.sort((a, b) => a.name.localeCompare(b.name));
  }
  async getMedicationsFromFolder() {
    const medications = [];
    console.log("Looking for medications folder:", this.settings.medicationsFolder);
    const medicationsFolder = this.app.vault.getAbstractFileByPath(this.settings.medicationsFolder);
    if (!medicationsFolder || !(medicationsFolder instanceof import_obsidian3.TFolder)) {
      console.log("Medications folder not found or not a folder");
      return medications;
    }
    console.log("Medications folder found, scanning files...");
    const files = this.app.vault.getMarkdownFiles().filter(
      (file) => file.path.startsWith(this.settings.medicationsFolder + "/")
    );
    console.log("Found files in medications folder:", files.length);
    for (const file of files) {
      try {
        const displayName = file.basename;
        medications.push({
          name: displayName,
          link: `[[${file.basename}]]`
        });
        console.log(`Added medication: ${displayName}`);
      } catch (error) {
        console.warn("Error processing file:", file.path, error);
      }
    }
    console.log("Total medications found:", medications.length);
    return medications.sort((a, b) => a.name.localeCompare(b.name));
  }
  async getDiagnosesFromFolder() {
    const diagnoses = [];
    console.log("Looking for diagnosis folder:", this.settings.diagnosisFolder);
    const diagnosisFolder = this.app.vault.getAbstractFileByPath(this.settings.diagnosisFolder);
    if (!diagnosisFolder || !(diagnosisFolder instanceof import_obsidian3.TFolder)) {
      console.log("Diagnosis folder not found or not a folder");
      return diagnoses;
    }
    console.log("Diagnosis folder found, scanning files...");
    const files = this.app.vault.getMarkdownFiles().filter(
      (file) => file.path.startsWith(this.settings.diagnosisFolder + "/")
    );
    console.log("Found files in diagnosis folder:", files.length);
    for (const file of files) {
      try {
        const displayName = file.basename;
        diagnoses.push({
          name: displayName,
          link: `[[${file.basename}]]`
        });
        console.log(`Added diagnosis: ${displayName}`);
      } catch (error) {
        console.warn("Error processing file:", file.path, error);
      }
    }
    console.log("Total diagnoses found:", diagnoses.length);
    return diagnoses.sort((a, b) => a.name.localeCompare(b.name));
  }
  async getManufacturersFromPrescriptions() {
    var _a;
    const manufacturers = /* @__PURE__ */ new Set();
    console.log("Scanning prescription notes for manufacturers...");
    const allFiles = this.app.vault.getMarkdownFiles();
    const prescriptionFiles = allFiles.filter(
      (file) => file.path.startsWith(this.settings.prescriptionFolder + "/")
    );
    console.log("Found prescription files:", prescriptionFiles.length);
    for (const file of prescriptionFiles) {
      try {
        const frontmatter = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
        if (frontmatter && frontmatter.fileClass === "Prescriptions" && frontmatter.mfg) {
          const manufacturer = frontmatter.mfg.toString().trim();
          if (manufacturer && manufacturer !== "" && manufacturer !== "undefined") {
            manufacturers.add(manufacturer);
            console.log(`Found manufacturer: ${manufacturer} in ${file.path}`);
          }
        }
      } catch (error) {
        console.warn("Error reading prescription file:", file.path, error);
      }
    }
    const uniqueManufacturers = Array.from(manufacturers).sort();
    console.log("Total unique manufacturers found:", uniqueManufacturers.length, uniqueManufacturers);
    return uniqueManufacturers;
  }
  async createPrescriptionNote(data) {
    const baseFolder = this.settings.prescriptionFolder;
    const dateFolderPath = getDateBasedPath(data.fillDate, baseFolder, this.settings.dateOrganization);
    await this.ensureFolderExists(dateFolderPath);
    let dateFinished = "";
    if (data.obtainedDate && data.daysSupply > 0) {
      const obtainedDate = (0, import_moment.default)(data.obtainedDate);
      const finishedDate = obtainedDate.add(data.daysSupply, "days");
      dateFinished = finishedDate.format("YYYY-MM-DD");
    }
    let drugLabelFileName = "";
    if (data.drugLabel && data.drugLabel.trim()) {
      console.log("Drug label selected, attempting to rename:", data.drugLabel);
      drugLabelFileName = await this.renameDrugLabelFile(data);
      console.log("Rename result:", drugLabelFileName);
    } else {
      console.log("No drug label selected for renaming");
    }
    const dateFormatted = data.fillDate.replace(/[-]/g, "");
    const safeMedication = data.medicationName.replace(/[<>:"/\\|?*\[\]]/g, "");
    const safeDosage = data.dosage.replace(/[<>:"/\\|?*\[\]]/g, "");
    const prescriptionNum = data.prescriptionNumber || "UNKNOWN";
    const fileName = `${dateFormatted} - Rx${prescriptionNum} -- ${safeMedication} ${safeDosage}`;
    const filePath = `${dateFolderPath}/${fileName}.md`;
    const frontmatter = `---
fileClass: Prescriptions
filename: ${fileName}
rxNum: "${data.prescriptionNumber}"
medication: "${data.medicationName}"
diagnosis: "${data.diagnosis}"
pharmacy: ${data.pharmacy}
prescriber: "${data.prescribedBy}"
qtyWrit: ${data.quantityWritten}
qtyDisp: ${data.quantityDispensed}
refills: ${data.refillsRemaining}
dose: ${data.dosage}
dateWritten: ${data.dateWritten}
dateFilled: ${data.fillDate}
dateObtained: ${data.obtainedDate}
copay: ${data.copay}
mfg: ${data.manufacturer}
patient: "${data.patient}"
drugLabel: ${drugLabelFileName ? `"[[${drugLabelFileName}]]"` : '""'}
substituted: ${data.substituted}
daySupply: ${data.daysSupply}
dateFinished: ${dateFinished}
---

# ${data.medicationName.replace(/[\[\]]/g, "")} ${data.dosage}
`;
    try {
      const file = await this.app.vault.create(filePath, frontmatter);
      new import_obsidian3.Notice(`Prescription note created: ${fileName}`);
      const leaf = this.app.workspace.getUnpinnedLeaf();
      if (leaf) {
        await leaf.openFile(file);
      }
    } catch (error) {
      new import_obsidian3.Notice(`Error creating prescription note: ${error.message}`);
    }
  }
  async ensureFolderExists(folderPath) {
    const normalizedPath = (0, import_obsidian3.normalizePath)(folderPath);
    const parts = normalizedPath.split("/");
    let currentPath = "";
    for (const part of parts) {
      currentPath = currentPath ? `${currentPath}/${part}` : part;
      const folder = this.app.vault.getAbstractFileByPath(currentPath);
      if (!folder) {
        try {
          await this.app.vault.createFolder(currentPath);
        } catch (error) {
          console.log(`Could not create folder ${currentPath}:`, error);
        }
      }
    }
  }
  async renameDrugLabelFile(data) {
    var _a;
    try {
      console.log("=== Drug Label Renaming Debug ===");
      console.log("Input data.drugLabel:", data.drugLabel);
      console.log("Fill date:", data.fillDate);
      console.log("Pharmacy:", data.pharmacy);
      console.log("Medication:", data.medicationName);
      console.log("Dosage:", data.dosage);
      const originalFile = this.app.vault.getAbstractFileByPath(data.drugLabel);
      console.log("Original file found:", originalFile ? "YES" : "NO");
      console.log("Original file details:", originalFile);
      if (!originalFile || !(originalFile instanceof import_obsidian3.TFile)) {
        console.warn("Drug label file not found:", data.drugLabel);
        new import_obsidian3.Notice(`Drug label file not found: ${data.drugLabel}`);
        return "";
      }
      if (!data.fillDate || !data.pharmacy || !data.medicationName || !data.dosage) {
        console.warn("Missing required fields for drug label renaming");
        new import_obsidian3.Notice("Missing required fields (date, pharmacy, medication, or dosage) for drug label renaming");
        return "";
      }
      const dateFormatted = data.fillDate.replace(/[-]/g, "");
      const cleanPharmacy = data.pharmacy.replace(/[\[\]]/g, "").trim();
      const cleanMedication = data.medicationName.replace(/[\[\]]/g, "").trim();
      const cleanDosage = data.dosage.replace(/[\[\]]/g, "").trim();
      const safePharmacy = cleanPharmacy.replace(/[<>:"/\\|?*]/g, "");
      const safeMedication = cleanMedication.replace(/[<>:"/\\|?*]/g, "");
      const safeDosage = cleanDosage.replace(/[<>:"/\\|?*]/g, "");
      console.log("Clean pharmacy:", cleanPharmacy, "-> Safe:", safePharmacy);
      console.log("Clean medication:", cleanMedication, "-> Safe:", safeMedication);
      console.log("Clean dosage:", cleanDosage, "-> Safe:", safeDosage);
      const fileExtension = originalFile.extension;
      const newFileName = `${dateFormatted} - ${safePharmacy} -- ${safeMedication} ${safeDosage}.${fileExtension}`;
      const originalDir = ((_a = originalFile.parent) == null ? void 0 : _a.path) || "";
      const newFilePath = originalDir ? `${originalDir}/${newFileName}` : newFileName;
      console.log(`Attempting to rename drug label from "${originalFile.path}" to "${newFilePath}"`);
      const existingFile = this.app.vault.getAbstractFileByPath(newFilePath);
      if (existingFile) {
        console.warn("Target filename already exists:", newFilePath);
        new import_obsidian3.Notice(`Target filename already exists: ${newFileName}`);
        return "";
      }
      await this.app.vault.rename(originalFile, newFilePath);
      console.log("File successfully renamed!");
      new import_obsidian3.Notice(`Drug label renamed to: ${newFileName}`);
      const linkName = newFileName;
      console.log("Returning link name:", linkName);
      console.log("=== End Drug Label Renaming Debug ===");
      return linkName;
    } catch (error) {
      console.error("Error renaming drug label file:", error);
      new import_obsidian3.Notice(`Error renaming drug label file: ${error.message}`);
      return "";
    }
  }
  async promptForMedicationName() {
    const modal = new MedicationSelectionModal(this.app, this, async (medicationData) => {
      try {
        const filePath = await generateMedicationNote(medicationData, this.settings.medicationsFolder, this.app, false);
        new import_obsidian3.Notice(`Medication note created: ${medicationData.title}`);
        const file = this.app.vault.getAbstractFileByPath(filePath);
        if (file) {
          const leaf = this.app.workspace.getUnpinnedLeaf();
          if (leaf) {
            await leaf.openFile(file);
          }
        }
      } catch (error) {
        if (error.message.includes("already exists")) {
          new import_obsidian3.Notice(`A medication note for "${medicationData.title}" already exists. Use "Convert current file" if you want to update it.`);
        } else {
          new import_obsidian3.Notice(`Error creating medication note: ${error.message}`);
        }
        console.error("Error creating medication note:", error);
      }
    });
    modal.open();
  }
  async convertCurrentMedicationNote() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      new import_obsidian3.Notice("No active file to convert");
      return;
    }
    const normalizedMedicationsFolder = (0, import_obsidian3.normalizePath)(this.settings.medicationsFolder);
    const normalizedFilePath = (0, import_obsidian3.normalizePath)(activeFile.path);
    if (!normalizedFilePath.startsWith(normalizedMedicationsFolder + "/")) {
      new import_obsidian3.Notice(`Current file is not in the medications folder. Expected folder: "${this.settings.medicationsFolder}"`);
      console.log(`\u{1F4CD} File check: "${normalizedFilePath}" not in "${normalizedMedicationsFolder}"`);
      return;
    }
    if (activeFile.extension !== "md") {
      new import_obsidian3.Notice("Current file is not a markdown file");
      return;
    }
    console.log(`\u2705 File validation passed: ${activeFile.path} is in medications folder`);
    try {
      const medicationName = this.extractMedicationName(activeFile);
      if (!medicationName) {
        new import_obsidian3.Notice("Could not extract medication name from current file");
        return;
      }
      console.log(`\u{1F504} Converting medication file: ${activeFile.name} -> ${medicationName}`);
      const searchResults = await searchMedications(medicationName);
      if (searchResults.length === 0) {
        new import_obsidian3.Notice(`No medication data found for: ${medicationName}`);
        return;
      }
      const medicationData = searchResults[0];
      const filePath = await generateMedicationNote(medicationData, this.settings.medicationsFolder, this.app, true);
      const newFile = this.app.vault.getAbstractFileByPath(filePath);
      if (newFile && newFile.path !== activeFile.path) {
        await this.app.vault.delete(activeFile);
        console.log(`\u{1F5D1}\uFE0F Deleted old file: ${activeFile.path}`);
      }
      new import_obsidian3.Notice(`Medication note converted: ${medicationData.title}`);
      if (newFile) {
        const leaf = this.app.workspace.getUnpinnedLeaf();
        if (leaf) {
          await leaf.openFile(newFile);
        }
      }
    } catch (error) {
      if (error.message.includes("already exists")) {
        new import_obsidian3.Notice(`Error: Could not convert medication note - ${error.message}`);
      } else {
        new import_obsidian3.Notice(`Error converting medication note: ${error.message}`);
      }
      console.error("Error converting medication note:", error);
    }
  }
  extractMedicationName(file) {
    let medicationName = file.basename;
    medicationName = medicationName.replace(/^\d{4}-\d{2}-\d{2}\s*-\s*/, "");
    medicationName = medicationName.replace(/^\d{8}\s*-\s*/, "");
    medicationName = medicationName.replace(/^Rx\d+\s*-\s*/, "");
    medicationName = medicationName.replace(/\s+\d+(\.\d+)?\s*(mg|mcg|g|ml|units?)(\s+.*)?$/i, "");
    medicationName = medicationName.replace(/\s*-\s*medication$/i, "");
    medicationName = medicationName.replace(/\s*note$/i, "");
    medicationName = medicationName.replace(/^\s*-\s*/, "").replace(/\s*-\s*$/, "").trim();
    console.log(`\u{1F4DD} Extracted medication name: "${file.basename}" -> "${medicationName}"`);
    return medicationName.length > 0 ? medicationName : null;
  }
  async promptForText(title, placeholder) {
    return new Promise((resolve) => {
      const modal = new TextInputModal(this.app, title, placeholder, (result) => {
        resolve(result);
      });
      modal.open();
    });
  }
};
var MedicationSelectionModal = class extends import_obsidian3.Modal {
  constructor(app, plugin, onSelect) {
    super(app);
    this.searchResults = [];
    this.plugin = plugin;
    this.onSelectCallback = onSelect;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h3", { text: "Create Medication Note" });
    const searchContainer = contentEl.createDiv({ cls: "search-container" });
    const searchInput = searchContainer.createEl("input", {
      type: "text",
      placeholder: "Search for a medication...",
      cls: "search-input"
    });
    const resultsContainer = contentEl.createDiv({ cls: "search-results" });
    searchInput.addEventListener("input", async (e) => {
      const query = e.target.value.trim();
      if (query.length >= 2) {
        resultsContainer.empty();
        resultsContainer.createEl("p", { text: "Searching RxNorm database..." });
        try {
          this.searchResults = await searchMedications(query);
          this.displayResults(resultsContainer);
        } catch (error) {
          console.error("Search failed:", error);
          resultsContainer.empty();
          resultsContainer.createEl("p", { text: "Search failed. Please try again." });
        }
      } else {
        resultsContainer.empty();
        resultsContainer.createEl("p", { text: "Type at least 2 characters to search..." });
      }
    });
    resultsContainer.createEl("p", { text: "Type at least 2 characters to search the RxNorm medication database..." });
    searchInput.focus();
  }
  displayResults(container) {
    container.empty();
    if (this.searchResults.length === 0) {
      container.createEl("p", { text: "No medications found. Try a different search term." });
      return;
    }
    this.searchResults.forEach((med) => {
      const resultEl = container.createDiv({ cls: "search-result-item" });
      const titleEl = resultEl.createEl("div", { cls: "result-title", text: med.title });
      const detailsEl = resultEl.createEl("div", { cls: "result-details" });
      if (med.generic_name && med.generic_name !== med.title) {
        detailsEl.createEl("span", {
          text: `Generic: ${med.generic_name}`,
          cls: "result-generic"
        });
      }
      if (med.brand_names && med.brand_names.length > 1) {
        const brandText = med.brand_names.filter((brand) => brand !== med.title).slice(0, 3).join(", ");
        if (brandText) {
          detailsEl.createEl("span", {
            text: ` \u2022 Brands: ${brandText}`,
            cls: "result-brands"
          });
        }
      }
      resultEl.addEventListener("click", () => {
        this.onSelectCallback(med);
        this.close();
      });
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var PrescriptionModal = class extends import_obsidian3.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
    this.data = {
      medicationName: "",
      fillDate: (/* @__PURE__ */ new Date()).toISOString().split("T")[0],
      // Today's date
      obtainedDate: (/* @__PURE__ */ new Date()).toISOString().split("T")[0],
      // Today's date
      pharmacy: "",
      prescriptionNumber: "",
      dosage: "",
      daysSupply: 0,
      quantityDispensed: "",
      copay: "",
      manufacturer: "",
      patient: "",
      frequency: "",
      prescribedBy: "",
      instructions: "",
      refillsRemaining: 0,
      notes: "",
      diagnosis: "",
      quantityWritten: "",
      dateWritten: "",
      drugLabel: "",
      substituted: "",
      dateFinished: ""
    };
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.addClass("prescription-modal");
    contentEl.createEl("h2", { text: "Add New Prescription" });
    const medicationSetting = new import_obsidian3.Setting(contentEl).setName("Medication Name").setDesc("Name of the prescribed medication");
    medicationSetting.addDropdown((dropdown) => {
      dropdown.addOption("", "Select a medication...");
      dropdown.addOption("__custom__", "Other (enter manually)");
      this.plugin.getMedicationsFromFolder().then((medications) => {
        console.log("Found medications:", medications);
        if (medications.length > 0) {
          dropdown.selectEl.empty();
          dropdown.addOption("", "Select a medication...");
          medications.forEach((medication) => {
            dropdown.addOption(medication.link, medication.name);
          });
          dropdown.addOption("__custom__", "Other (enter manually)");
          if (this.data.medicationName) {
            dropdown.setValue(this.data.medicationName);
          }
        } else {
          console.log("No medications found in medications folder");
        }
      }).catch((error) => {
        console.warn("Error loading medications:", error);
      });
      dropdown.setValue(this.data.medicationName);
      dropdown.onChange(async (value) => {
        if (value === "__custom__") {
          this.data.medicationName = "__custom__";
          this.showCustomMedicationInput(medicationSetting.settingEl);
        } else {
          this.data.medicationName = value;
        }
      });
    });
    new import_obsidian3.Setting(contentEl).setName("Prescription Fill Date").setDesc("Date the prescription was filled at the pharmacy").addText((text) => {
      text.inputEl.type = "date";
      text.setValue(this.data.fillDate).onChange(async (value) => {
        this.data.fillDate = value;
      });
    });
    new import_obsidian3.Setting(contentEl).setName("Prescription Obtained Date").setDesc("Date the prescription was originally issued/obtained").addText((text) => {
      text.inputEl.type = "date";
      text.setValue(this.data.obtainedDate).onChange(async (value) => {
        this.data.obtainedDate = value;
      });
    });
    new import_obsidian3.Setting(contentEl).setName("Pharmacy").setDesc("Pharmacy where prescription was filled").addDropdown((dropdown) => {
      dropdown.addOption("", "Select a pharmacy...");
      this.plugin.settings.pharmacyList.forEach((pharmacy) => {
        dropdown.addOption(pharmacy, pharmacy);
      });
      dropdown.addOption("__custom__", "Other (enter manually)");
      dropdown.setValue(this.data.pharmacy);
      dropdown.onChange(async (value) => {
        if (value === "__custom__") {
          const settingItem = dropdown.selectEl.closest(".setting-item");
          if (settingItem) {
            this.showCustomPharmacyInput(settingItem);
          }
        } else {
          this.data.pharmacy = value;
        }
      });
    });
    new import_obsidian3.Setting(contentEl).setName("Prescription Number").setDesc("Prescription number from the pharmacy").addText((text) => text.setPlaceholder("e.g., 6298009").setValue(this.data.prescriptionNumber).onChange(async (value) => {
      this.data.prescriptionNumber = value;
    }));
    new import_obsidian3.Setting(contentEl).setName("Dose").setDesc("Dosage and strength").addText((text) => text.setPlaceholder("e.g., 10mg").setValue(this.data.dosage).onChange(async (value) => {
      this.data.dosage = value;
    }));
    new import_obsidian3.Setting(contentEl).setName("Days Supply").setDesc("Number of days the prescription should last").addText((text) => text.setPlaceholder("e.g., 30").setValue(this.data.daysSupply.toString()).onChange(async (value) => {
      this.data.daysSupply = parseInt(value) || 0;
    }));
    new import_obsidian3.Setting(contentEl).setName("Quantity Dispensed").setDesc("Amount of medication dispensed").addText((text) => text.setPlaceholder("e.g., 30 tablets").setValue(this.data.quantityDispensed).onChange(async (value) => {
      this.data.quantityDispensed = value;
    }));
    new import_obsidian3.Setting(contentEl).setName("Copay").setDesc("Amount paid for the prescription").addText((text) => text.setPlaceholder("e.g., $15.00").setValue(this.data.copay).onChange(async (value) => {
      this.data.copay = value;
    }));
    const manufacturerSetting = new import_obsidian3.Setting(contentEl).setName("Manufacturer").setDesc("Pharmaceutical manufacturer");
    manufacturerSetting.addDropdown((dropdown) => {
      dropdown.addOption("", "Select a manufacturer...");
      dropdown.addOption("__custom__", "Other (enter manually)");
      this.plugin.getManufacturersFromPrescriptions().then((manufacturers) => {
        console.log("Found manufacturers:", manufacturers);
        if (manufacturers.length > 0) {
          dropdown.selectEl.empty();
          dropdown.addOption("", "Select a manufacturer...");
          manufacturers.forEach((manufacturer) => {
            dropdown.addOption(manufacturer, manufacturer);
          });
          dropdown.addOption("__custom__", "Other (enter manually)");
          if (this.data.manufacturer) {
            dropdown.setValue(this.data.manufacturer);
          }
        } else {
          console.log("No manufacturers found in existing prescription notes");
        }
      }).catch((error) => {
        console.warn("Error loading manufacturers:", error);
      });
      dropdown.setValue(this.data.manufacturer);
      dropdown.onChange(async (value) => {
        if (value === "__custom__") {
          this.data.manufacturer = "__custom__";
          this.showCustomManufacturerInput(manufacturerSetting.settingEl);
        } else {
          this.data.manufacturer = value;
        }
      });
    });
    const patientSetting = new import_obsidian3.Setting(contentEl).setName("Patient").setDesc("Select from People notes or enter manually").addDropdown((dropdown) => {
      dropdown.addOption("", "Select a patient...");
      this.plugin.getPatientsFromPeopleNotes().then((patients) => {
        if (patients.length > 0) {
          dropdown.selectEl.empty();
          dropdown.addOption("", "Select a patient...");
          patients.forEach((patient) => {
            dropdown.addOption(patient.link, patient.name);
          });
        }
        dropdown.addOption("__custom__", "Other (enter manually)");
        if (this.data.patient) {
          dropdown.setValue(this.data.patient);
        }
      }).catch((error) => {
        console.error("Error loading patients from people notes:", error);
        dropdown.addOption("__custom__", "Other (enter manually)");
        if (this.data.patient) {
          dropdown.setValue(this.data.patient);
        }
      });
      dropdown.onChange(async (value) => {
        if (value === "__custom__") {
          this.data.patient = "__custom__";
          this.showCustomPatientInput(patientSetting.settingEl);
        } else if (value === "__separator__") {
          return;
        } else {
          this.data.patient = value;
        }
      });
    });
    new import_obsidian3.Setting(contentEl).setName("Drug Label").setDesc("Select a PDF file from the +Inbox folder for the drug label").addDropdown((dropdown) => {
      dropdown.addOption("", "Select a file...");
      const inboxFolder = this.app.vault.getAbstractFileByPath("+Inbox");
      if (inboxFolder instanceof import_obsidian3.TFolder) {
        const files = inboxFolder.children.filter((file) => {
          if (file instanceof import_obsidian3.TFile) {
            return file.extension === "pdf" && file.name.includes("_");
          }
          return false;
        });
        files.forEach((file) => {
          if (file instanceof import_obsidian3.TFile) {
            dropdown.addOption(file.path, file.name);
          }
        });
      }
      dropdown.setValue(this.data.drugLabel);
      dropdown.onChange(async (value) => {
        this.data.drugLabel = value;
      });
    });
    new import_obsidian3.Setting(contentEl).setName("Substituted").setDesc("Whether the medication was substituted").addText((text) => text.setPlaceholder("e.g., Generic substitution").setValue(this.data.substituted).onChange(async (value) => {
      this.data.substituted = value;
    }));
    new import_obsidian3.Setting(contentEl).setName("Frequency").setDesc("How often to take the medication").addText((text) => text.setPlaceholder("e.g., Once daily").setValue(this.data.frequency).onChange(async (value) => {
      this.data.frequency = value;
    }));
    const prescriberSetting = new import_obsidian3.Setting(contentEl).setName("Prescribed By").setDesc("Doctor or healthcare provider");
    prescriberSetting.addDropdown((dropdown) => {
      dropdown.addOption("", "Select a doctor...");
      dropdown.addOption("__custom__", "Other (enter manually)");
      this.plugin.getDoctorsFromPeopleNotes().then((doctors) => {
        console.log("Found doctors:", doctors);
        if (doctors.length > 0) {
          dropdown.selectEl.empty();
          dropdown.addOption("", "Select a doctor...");
          doctors.forEach((doctor) => {
            dropdown.addOption(doctor.link, doctor.name);
          });
          dropdown.addOption("__custom__", "Other (enter manually)");
          if (this.data.prescribedBy) {
            dropdown.setValue(this.data.prescribedBy);
          }
        } else {
          console.log("No doctors found in people notes");
        }
      }).catch((error) => {
        console.warn("Error loading doctors:", error);
      });
      dropdown.setValue(this.data.prescribedBy);
      dropdown.onChange(async (value) => {
        if (value === "__custom__") {
          this.data.prescribedBy = "__custom__";
          this.showCustomPrescriberInput(prescriberSetting.settingEl);
        } else {
          this.data.prescribedBy = value;
        }
      });
    });
    new import_obsidian3.Setting(contentEl).setName("Refills Remaining").setDesc("Number of refills remaining").addText((text) => text.setPlaceholder("e.g., 5").setValue(this.data.refillsRemaining.toString()).onChange(async (value) => {
      this.data.refillsRemaining = parseInt(value) || 0;
    }));
    const diagnosisSetting = new import_obsidian3.Setting(contentEl).setName("Diagnosis").setDesc("Select from diagnosis notes or enter manually").addDropdown((dropdown) => {
      dropdown.addOption("", "Select a diagnosis...");
      this.plugin.getDiagnosesFromFolder().then((diagnoses) => {
        console.log("Found diagnoses:", diagnoses);
        if (diagnoses.length > 0) {
          dropdown.selectEl.empty();
          dropdown.addOption("", "Select a diagnosis...");
          diagnoses.forEach((diagnosis) => {
            dropdown.addOption(diagnosis.link, diagnosis.name);
          });
          dropdown.addOption("__custom__", "Other (enter manually)");
          if (this.data.diagnosis) {
            dropdown.setValue(this.data.diagnosis);
          }
        } else {
          console.log("No diagnoses found in folder");
          dropdown.addOption("__custom__", "Other (enter manually)");
          if (this.data.diagnosis) {
            dropdown.setValue(this.data.diagnosis);
          }
        }
      }).catch((error) => {
        console.error("Error loading diagnoses:", error);
        dropdown.addOption("__custom__", "Other (enter manually)");
        if (this.data.diagnosis) {
          dropdown.setValue(this.data.diagnosis);
        }
      });
      dropdown.onChange(async (value) => {
        if (value === "__custom__") {
          this.data.diagnosis = "__custom__";
          this.showCustomDiagnosisInput(diagnosisSetting.settingEl);
        } else {
          this.data.diagnosis = value;
        }
      });
    });
    new import_obsidian3.Setting(contentEl).setName("Quantity Written").setDesc("Original quantity prescribed by the doctor").addText((text) => text.setPlaceholder("e.g., 30 tablets").setValue(this.data.quantityWritten).onChange(async (value) => {
      this.data.quantityWritten = value;
    }));
    new import_obsidian3.Setting(contentEl).setName("Date Written").setDesc("Date the prescription was originally written/prescribed").addText((text) => {
      text.inputEl.type = "date";
      text.setValue(this.data.dateWritten).onChange(async (value) => {
        this.data.dateWritten = value;
      });
    });
    new import_obsidian3.Setting(contentEl).setName("Instructions").setDesc("Special instructions for taking the medication").addTextArea((text) => text.setPlaceholder("e.g., Take with food").setValue(this.data.instructions).onChange(async (value) => {
      this.data.instructions = value;
    }));
    new import_obsidian3.Setting(contentEl).setName("Additional Notes").setDesc("Any additional notes or observations").addTextArea((text) => text.setPlaceholder("Additional notes...").setValue(this.data.notes).onChange(async (value) => {
      this.data.notes = value;
    }));
    const buttonContainer = contentEl.createDiv({ cls: "modal-button-container" });
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "flex-end";
    buttonContainer.style.gap = "10px";
    buttonContainer.style.marginTop = "20px";
    const cancelButton = buttonContainer.createEl("button", { text: "Cancel" });
    cancelButton.onclick = () => this.close();
    const okButton = buttonContainer.createEl("button", { text: "Create Note", cls: "mod-cta" });
    okButton.onclick = async () => {
      if (!this.data.medicationName.trim()) {
        new import_obsidian3.Notice("Please enter a medication name");
        return;
      }
      if (!this.data.prescriptionNumber.trim()) {
        new import_obsidian3.Notice("Please enter a prescription number");
        return;
      }
      await this.plugin.createPrescriptionNote(this.data);
      this.close();
    };
  }
  showCustomPharmacyInput(settingItem) {
    const controlEl = settingItem.querySelector(".setting-item-control");
    if (controlEl) {
      controlEl.empty();
      const textInput = controlEl.createEl("input", {
        type: "text",
        placeholder: "Enter pharmacy name",
        value: this.data.pharmacy === "__custom__" ? "" : this.data.pharmacy
      });
      textInput.addEventListener("input", () => {
        this.data.pharmacy = textInput.value;
      });
      textInput.focus();
    }
  }
  showCustomMedicationInput(settingItem) {
    const controlEl = settingItem.querySelector(".setting-item-control");
    if (controlEl) {
      controlEl.empty();
      const textInput = controlEl.createEl("input", {
        type: "text",
        placeholder: "Enter medication name",
        value: this.data.medicationName === "__custom__" ? "" : this.data.medicationName
      });
      textInput.addEventListener("input", () => {
        this.data.medicationName = textInput.value;
      });
      textInput.focus();
    }
  }
  showCustomDiagnosisInput(settingItem) {
    const controlEl = settingItem.querySelector(".setting-item-control");
    if (controlEl) {
      controlEl.empty();
      const textInput = controlEl.createEl("input", {
        type: "text",
        placeholder: "Enter diagnosis",
        value: this.data.diagnosis === "__custom__" ? "" : this.data.diagnosis
      });
      textInput.addEventListener("input", () => {
        this.data.diagnosis = textInput.value;
      });
      textInput.focus();
    }
  }
  showCustomManufacturerInput(settingItem) {
    const controlEl = settingItem.querySelector(".setting-item-control");
    if (controlEl) {
      controlEl.empty();
      const textInput = controlEl.createEl("input", {
        type: "text",
        placeholder: "Enter manufacturer name",
        value: this.data.manufacturer === "__custom__" ? "" : this.data.manufacturer
      });
      textInput.addEventListener("input", () => {
        this.data.manufacturer = textInput.value;
      });
      textInput.focus();
    }
  }
  showCustomPatientInput(settingItem) {
    const controlEl = settingItem.querySelector(".setting-item-control");
    if (controlEl) {
      controlEl.empty();
      const textInput = controlEl.createEl("input", {
        type: "text",
        placeholder: "Enter patient name",
        value: this.data.patient === "__custom__" ? "" : this.data.patient
      });
      textInput.addEventListener("input", () => {
        this.data.patient = textInput.value;
      });
      textInput.focus();
    }
  }
  showCustomPrescriberInput(settingItem) {
    const controlEl = settingItem.querySelector(".setting-item-control");
    if (controlEl) {
      controlEl.empty();
      const textInput = controlEl.createEl("input", {
        type: "text",
        placeholder: "Enter prescriber name",
        value: this.data.prescribedBy === "__custom__" ? "" : this.data.prescribedBy
      });
      textInput.addEventListener("input", () => {
        this.data.prescribedBy = textInput.value;
      });
      textInput.focus();
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var TextInputModal = class extends import_obsidian3.Modal {
  constructor(app, title, placeholder, onSubmit) {
    super(app);
    this.title = title;
    this.placeholder = placeholder;
    this.onSubmit = onSubmit;
    this.result = "";
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: this.title });
    const inputContainer = contentEl.createDiv({ cls: "text-input-container" });
    const textInput = inputContainer.createEl("input", {
      type: "text",
      placeholder: this.placeholder
    });
    textInput.style.width = "100%";
    textInput.style.marginBottom = "10px";
    textInput.addEventListener("input", () => {
      this.result = textInput.value;
    });
    textInput.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        this.close();
        this.onSubmit(this.result);
      }
      if (e.key === "Escape") {
        this.close();
        this.onSubmit("");
      }
    });
    const buttonContainer = contentEl.createDiv({ cls: "modal-button-container" });
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "flex-end";
    buttonContainer.style.gap = "10px";
    buttonContainer.style.marginTop = "10px";
    const cancelButton = buttonContainer.createEl("button", { text: "Cancel" });
    cancelButton.onclick = () => {
      this.close();
      this.onSubmit("");
    };
    const okButton = buttonContainer.createEl("button", { text: "Create", cls: "mod-cta" });
    okButton.onclick = () => {
      this.close();
      this.onSubmit(this.result);
    };
    textInput.focus();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
/*! Bundled license information:

moment/moment.js:
  (*! moment.js *)
  (*! version : 2.30.1 *)
  (*! authors : Tim Wood, Iskren Chernev, Moment.js contributors *)
  (*! license : MIT *)
  (*! momentjs.com *)
*/
